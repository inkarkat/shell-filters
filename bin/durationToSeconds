#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '"[Ww ][Dd ][HH:]MM:SS" [...] [-?|-h|--help]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-s|--skip SKIP&PATTERN [...]] [-m|--match MATCH&PATTERN [...]]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Convert matches of [Ww ][Dd ][HH:]MM:SS into seconds.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --skip|-s SKIP&PATTERN  Do not convert if the text around the duration (with
			    the duration itself represented by &) matches
			    SKIP&PATTERN.
    --match|-m MATCH&PATTERN
			    Only convert if the text around the duration (with
			    the duration itself represented by &) matches
			    MATCH&PATTERN. Other occurrences (and those that
			    also match --skip SKIP&PATTERN) are not converted.
PATTERN is an AWK-style extended regular expression.
HELPTEXT
}
skipPattern=
matchPattern=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--skip|-s)	shift; skipPattern="${skipPattern}${skipPattern:+|}${1:?}"; shift;;
	--match|-m)	shift; matchPattern="${matchPattern}${matchPattern:+|}${1:?}"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

awk -F $'\n' \
    -v "skipPattern=${skipPattern//\\/\\\\}" \
    -v "matchPattern=${matchPattern//\\/\\\\}" \
'
function convert(duration,      calendar, n, clock, days, weeks, result, hasMatch)
{
    n = split(gensub(/^.* /, "", 1, duration), clock, /:/)
    split(duration, calendar, / /)

    if (calendar[1] ~ /^[[:digit:]]+w$/) {
	weeks = substr(calendar[1], 1, length(calendar[1]) - 1)
	hasMatch = 1
	if (calendar[2] ~ /^[[:digit:]]+d$/) {
	    days = substr(calendar[2], 1, length(calendar[2]) - 1)
	}
    } else if (calendar[1] ~ /^[[:digit:]]+d$/) {
	days = substr(calendar[1], 1, length(calendar[1]) - 1)
	hasMatch = 1
    }
    result += weeks * 604800 + days * 86400

    if (n == 2) {
	result += clock[n - 1] * 60 + clock[n]
	hasMatch = 1
    } else if (n == 3) {
	result += clock[n - 2] * 3600 + clock[n - 1] * 60 + clock[n]
	hasMatch = 1
    }

    return (hasMatch ? result : duration)
}
function shallowclone(target, source,      e)
{
    for (e in source) target[e] = source[e]
}
function join(n, list, seps,      i, result) {
    for (i = 1; i <= n; ++i) {
	result = result list[i] seps[i]
    }
    result = result list[++i]
    return result
}
BEGIN {
    if (ARGC > 1) {
	for (i = 1; i < ARGC; ++i) {
	    print convert(ARGV[i])
	}
	exit 0
    }
}
{
    n = split($0, rest, /\<([[:digit:]]+w )?([[:digit:]]+d )?[[:digit:]]+(:[[:digit:]]{2}){1,2}\>/, durations)

    for (i = 1; i < n; ++i) {
	if (skipPattern != "" || matchPattern != "") {
	    shallowclone(testDurations, durations)
	    testDurations[i] = "&"
	    testJoin = join(n, rest, testDurations)
	    if (skipPattern != "" && testJoin ~ skipPattern) continue
	    if (matchPattern != "" && testJoin !~ matchPattern) continue
	}

	durations[i] = convert(durations[i])
    }

    $0 = join(n, rest, durations)
    print
}
' "$@"
