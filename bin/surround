#!/bin/bash

: ${SURROUND_EXEC_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-k|--keep-whitespace] [-s|--skip-empty] [-j|--join-by TEXT] [-f|--first-then-indent] [-l|--last-only] [--] PREFIX SUFFIX FILE [...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] -c|--command \"COMMANDLINE\" [...] | --exec SIMPLECOMMAND ... $SURROUND_EXEC_END [...] [--] PREFIX SUFFIX"
    echo
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[...] [--] PREFIX SUFFIX'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Prepend PREFIX and append SUFFIX around each individual line.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --keep-whitespace|-k
			Put leading whitespace before PREFIX and trailing
			whitespace after SUFFIX.
    --skip-empty|-s	Do not prefix lines that are empty or just contain
			whitespace; print them as-is.
    --join-by|-j TEXT	Join surrounded lines with TEXT instead of printing them
			on separate lines. TEXT will only be put in between
			lines, not at the beginning and not at the end, and with
			--skip-empty also not around empty lines.
    --first-then-indent|-f
			Prefix the first line, then indent following lines with
			the same amount of spaces.
    --last-only|-l	Suffix the last line only.
    --command|-c CMD	Execute CMD as a command-line and prefix its output.
    --exec COMMAND $SURROUND_EXEC_END	Execute COMMAND; all following arguments are taken to be
			arguments to the COMMAND until an argument consisting of
			'${SURROUND_EXEC_END}' is encountered. Its output is prefixed.
HELPTEXT
}

typeset -a commands=()
isKeepWhitespace=
skipEmptyPattern=
unset literalJoiner
isOnlyFirst=
isOnlyLast=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--keep-whitespace|-k)	shift; isKeepWhitespace=t;;
	--skip-empty|-s)	shift; skipEmptyPattern='[[:space:]]*\r\?';;
	--join-by|-j)	shift
			literalJoiner="$1"; shift
			literalJoiner="${literalJoiner//\\/\\\\}"
			literalJoiner="${literalJoiner//&/\\&}"
			literalJoiner="${literalJoiner//$'\n'/\\n}"
			;;
	--first-then-indent|-f)	shift; isOnlyFirst=t;;
	--last-only|-l)		shift; isOnlyLast=t;;
	--command|-c)	shift; commands+=(${commands:+;} "$1"); shift;;
	--exec)		shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$SURROUND_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd+="${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${SURROUND_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+=(${commands:+;} "$cmd")
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -le 1 ] || [ ${#commands[@]} -gt 0 -a $# -ne 2 ]; then
    printUsage "$0" >&2
    exit 2
fi
additionalSedPreProcessing=()
additionalSedPostProcessing=()
includePreviousIncompleteLine=
if [ -n "${literalJoiner+t}" ]; then
    includePreviousIncompleteLine='x; G; s/\n//; x; s/.*//; x'
    additionalSedPostProcessing+=(-e "$includePreviousIncompleteLine" -e "\$!{ N; ${skipEmptyPattern:+/\\n}${skipEmptyPattern}${skipEmptyPattern:+\$/!}{ s#\\n[^\\n]*\$#${literalJoiner//#/\\#}&#; :untilLastOfCurrent /\\n.*\\n/!b lastOfCurrentAndNextLine; P; s/^[^\\n]*\\n//; b untilLastOfCurrent; :lastOfCurrentAndNextLine; h; s/\\n.*\$//; x; s/^[^\\n]*\\n//; b restart } }")
fi
if [ -n "$skipEmptyPattern" ]; then
    additionalSedPreProcessing+=(-e "/^${skipEmptyPattern}\$/{ ${includePreviousIncompleteLine}${includePreviousIncompleteLine:+; }b }")
fi

prefix="$1"; shift
literalPrefix="$prefix"
literalPrefix="${literalPrefix//\\/\\\\}"
literalPrefix="${literalPrefix//&/\\&}"
literalPrefix="${literalPrefix//$'\n'/\\n}"

literalSuffix="$1"; shift
literalSuffix="${literalSuffix//\\/\\\\}"
literalSuffix="${literalSuffix//&/\\&}"
literalSuffix="${literalSuffix//$'\n'/\\n}"

typeset -a lastOnlySuffixSedProcessing=()
if [ "$isOnlyLast" ]; then
    lastOnlySuffixSedProcessing=(-e "\$s#\$#${literalSuffix//#/\\#}#")
    literalSuffix=''
fi

typeset -a indentSedProcessing=()
if [ "$isOnlyFirst" ]; then
    indent="${prefix//?/ }"
    prefixAddress=1
    indentSedProcessing=(-e "${prefixAddress}!s#\\(^\\|\\n\\)\\(${isKeepWhitespace:+[ \t\v\f\r]*}\\)\\([^\\n]*[^${isKeepWhitespace:+ \t\v\f}\\n\\r]\\|\\)\\([${isKeepWhitespace:+ \t\v\f}\r]*\$\\)#\\1\2${indent}\\3${literalSuffix//#/\\#}\\4#")
fi

eval "${commands:+{ }" "${commands[@]:-exec}" "${commands:+" ; } |"}" \
    'sed -e :restart "${additionalSedPreProcessing[@]}" -e "${prefixAddress}s#\\(^\\|\\n\\)\\(${isKeepWhitespace:+[ \t\v\f\r]*}\\)\\([^\\n]*[^${isKeepWhitespace:+ \t\v\f}\\n\\r]\\|\\)\\([${isKeepWhitespace:+ \t\v\f}\r]*\$\\)#\\1\2${literalPrefix//#/\\#}\\3${literalSuffix//#/\\#}\\4#" "${indentSedProcessing[@]}" "${lastOnlySuffixSedProcessing[@]}" "${additionalSedPostProcessing[@]}" "$@"'
