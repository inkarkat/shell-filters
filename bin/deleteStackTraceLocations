#!/bin/bash

: ${SED:=sed}

: ${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN='\(\[[0-9:]\+ [A-Z]\+\]: \)\?'}	# Note: This _must_ define exactly one capture group!

: ${DELETESTACKTRACELOCATIONS_IGNORE_PATTERN='not a valid package name'}
: ${DELETESTACKTRACELOCATIONS_OUR_PATTERN='[^j][^a][^v][^a][^.]'}

: ${DELETESTACKTRACELOCATIONS_REASON_PREFIX=[48;5;224m}
: ${DELETESTACKTRACELOCATIONS_REASON_SUFFIX=[0m}

: ${DELETESTACKTRACELOCATIONS_FILELOCATION_PREFIX=[04;38;5;62m}
: ${DELETESTACKTRACELOCATIONS_FILELOCATION_SUFFIX=[0m}

: ${DELETESTACKTRACELOCATIONS_FUNCTIONNAME_PREFIX=[01;38;5;19m}
: ${DELETESTACKTRACELOCATIONS_FUNCTIONNAME_SUFFIX=[0m}

: ${DELETESTACKTRACELOCATIONS_INTRO_PREFIX=[38;5;145m}
: ${DELETESTACKTRACELOCATIONS_INTRO_SUFFIX=[0m}

printUsage()
{
    cat <<HELPTEXT
Truncate long stack traces after showing the first location and last location
that belongs to one of "our" classes (as defined by
\$DELETESTACKTRACELOCATIONS_OUR_PATTERN, skipping matches of
\$DELETESTACKTRACELOCATIONS_IGNORE_PATTERN).
Also, do additional pretty printing (like putting the "nested exception is" on a
new line, and removing uninteresting fluff) and highlighting of various syntax
elements (unless --no-color is given; customizable via
\$DELETESTACKTRACELOCATIONS_*_{PRE,SUF}FIX environment variables).
HELPTEXT
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--no-color] [SED-OPTIONS ...] INPUT-FILE [...] [-?|-h|--help]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[--no-color] [SED-OPTIONS ...]'
}
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color)		shift; unset "${!DELETESTACKTRACELOCATIONS_@}";;
esac


exec $SED --unbuffered \
    -e '
:begin
' \
    -e '
# Java exception message
/^'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'[a-z]\+\.[a-zA-Z_.]*\(Exception\|Error\): \|^'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'Caused by: / {
    s/; \(nested exception is \)/\n    '"${DELETESTACKTRACELOCATIONS_INTRO_PREFIX//\//\\/}"'\1'"${DELETESTACKTRACELOCATIONS_INTRO_SUFFIX//\//\\/}"'/g
    s/\(^\|\n\)'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'\(Caused by: \)\?\([^:]\+: \)\([^\n]\+\)/\1'"${DELETESTACKTRACELOCATIONS_INTRO_PREFIX//\//\\/}"'\3'"${DELETESTACKTRACELOCATIONS_INTRO_SUFFIX//\//\\/}"'\4'"${DELETESTACKTRACELOCATIONS_REASON_PREFIX//\//\\/}"'\5'"${DELETESTACKTRACELOCATIONS_REASON_SUFFIX//\//\\/}"'/g
}
' \
    -e '
# Groovy exception message
/^'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'Message: \|^'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'Caused by / {
    s/; \(nested exception is \)/\n    '"${DELETESTACKTRACELOCATIONS_INTRO_PREFIX//\//\\/}"'\1'"${DELETESTACKTRACELOCATIONS_INTRO_SUFFIX//\//\\/}"'/g
    s/\(^\|\n\)'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'\(Message: \|Caused by \)\([^:]\+: \)\([^\n]\+\)/\1'"${DELETESTACKTRACELOCATIONS_INTRO_PREFIX//\//\\/}"'\3'"${DELETESTACKTRACELOCATIONS_INTRO_SUFFIX//\//\\/}"'\4'"${DELETESTACKTRACELOCATIONS_REASON_PREFIX//\//\\/}"'\5'"${DELETESTACKTRACELOCATIONS_REASON_SUFFIX//\//\\/}"'/g
}
' \
    -e '
# Only show a single line of stack traces.
/^'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'\tat /b deleteStackTraceLocations

# Delete the header line that sometimes occurs before a Groovy stack trace.
/^'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'    Line | Method$/D
# Only show a single line of Groovy stack traces.
/^'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'->> \+[0-9]\+ | / {
    # Delete the separator after the exception source
    N
    s/\n\(- \)\+$//

    b deleteGroovyStackTraceLocations
}

b
#-------------------------------------------------------------------------------

:deleteStackTraceLocations
# First delete unhelpful JAR location (~[file.jar:?]; in the worst case just
# ~[?:?]) at the end. Also because printStackTraceLocations() parsing does not
# handle that.
s/ ~\[[^]]*:[^]]*\]$//

N;/\n'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'\tat [^\n]*$/{
    # Test framework does not count as "us".
    /\n'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'\tat '"${DELETESTACKTRACELOCATIONS_IGNORE_PATTERN//\//\\/}"'/ {
	s/\n[^\n]*$//
	b deleteStackTraceLocations
    }
    # When a following location is from us ...
    /\n'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'\tat '"${DELETESTACKTRACELOCATIONS_OUR_PATTERN//\//\\/}"'[^\n]*$/ {
	# ... and we have two more from us already ...
	/\(^\|\n\)'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'\tat '"${DELETESTACKTRACELOCATIONS_OUR_PATTERN//\//\\/}"'[^\n]*\n\tat '"${DELETESTACKTRACELOCATIONS_OUR_PATTERN//\//\\/}"'[^\n]*\n/ {
	    # Drop the middle one, so that only the first and last will be kept.
	    s/\(^\|\n\)'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'\(\tat '"${DELETESTACKTRACELOCATIONS_OUR_PATTERN//\//\\/}"'[^\n]*\n\)\tat '"${DELETESTACKTRACELOCATIONS_OUR_PATTERN//\//\\/}"'[^\n]*\n/\1\3/
	    b deleteStackTraceLocations
	}
	# Else we only have one already, so keep the second one.
	b deleteStackTraceLocations
    }
    # Else delete it (and all following locations).
    s/\n[^\n]*$//
    b deleteStackTraceLocations
}
:printStackTraceLocations
/^'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'\tat /{
    s/(\([^)]\+:[0-9]\+\))\(\n\|$\)/('"${DELETESTACKTRACELOCATIONS_FILELOCATION_PREFIX//\//\\/}"'\1'"${DELETESTACKTRACELOCATIONS_FILELOCATION_SUFFIX//\//\\/}"')\2/
    s/\.lambda\$\([a-zA-Z0-9_]\+\)\$\([a-zA-Z0-9_]\+\)(/.'"${DELETESTACKTRACELOCATIONS_FUNCTIONNAME_PREFIX//\//\\/}"'\1Î»\2'"${DELETESTACKTRACELOCATIONS_FUNCTIONNAME_SUFFIX//\//\\/}"'(/
    /Î»/!s/\([a-zA-Z0-9_]\+\)(/'"${DELETESTACKTRACELOCATIONS_FUNCTIONNAME_PREFIX//\//\\/}"'\1'"${DELETESTACKTRACELOCATIONS_FUNCTIONNAME_SUFFIX//\//\\/}"'(/
    s/\tat /\t'"${DELETESTACKTRACELOCATIONS_INTRO_PREFIX//\//\\/}"'at'"${DELETESTACKTRACELOCATIONS_INTRO_SUFFIX//\//\\/}"' /

    P
    s/^[^\n]*\n//
    b printStackTraceLocations
}

# Remove any following summary of omitted frames; due to our deletions, the number is wrong, anyway.
/\(^\|\n\)'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'\t\.\.\. [0-9]\+ common frames omitted$/D

b begin
#-------------------------------------------------------------------------------

:deleteGroovyStackTraceLocations
N;/ in \+[^ \n]*$/{
    # Condense the formatting.
    s/ \([0-9]\+\) | \([^ \n]\+\) \+in \+\([^ \n]\+\)/ \2() in \3:\1/g

    # Test framework does not count as "us".
    /\n.* in '"${DELETESTACKTRACELOCATIONS_IGNORE_PATTERN//\//\\/}"'/ {
	s/\n[^\n]*$//
	b deleteGroovyStackTraceLocations
    }
    # When a following location is from us ...
    /\n[^\n]* in '"${DELETESTACKTRACELOCATIONS_OUR_PATTERN//\//\\/}"'[^\n]*$/ {
	# ... and we have two more from us already ...
	/\(^\|\n\)[^\n]* in '"${DELETESTACKTRACELOCATIONS_OUR_PATTERN//\//\\/}"'[^\n]*\n[^\n]* in '"${DELETESTACKTRACELOCATIONS_OUR_PATTERN//\//\\/}"'[^\n]*\n/ {
	    # Drop the middle one, so that only the first and last will be kept.
	    s/\(^\|\n\)\([^\n]* in '"${DELETESTACKTRACELOCATIONS_OUR_PATTERN//\//\\/}"'[^\n]*\n\)[^\n]* in '"${DELETESTACKTRACELOCATIONS_OUR_PATTERN//\//\\/}"'[^\n]*\n/\1\2/
	    b deleteGroovyStackTraceLocations
	}
	# Else we only have one already, so keep the second one.
	b deleteGroovyStackTraceLocations
    }
    # Else delete it (and all following locations).
    s/\n[^\n]*$//
    b deleteGroovyStackTraceLocations
}

:printGroovyStackTraceLocations
/^'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'->> \+\|^'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'| \+/{
    s/\([^ ]\+:[0-9]\+\)\(\n\|$\)/'"${DELETESTACKTRACELOCATIONS_FILELOCATION_PREFIX//\//\\/}"'\1'"${DELETESTACKTRACELOCATIONS_FILELOCATION_SUFFIX//\//\\/}"'\2/
    s/\([a-zA-Z0-9_]\+\)()/'"${DELETESTACKTRACELOCATIONS_FUNCTIONNAME_PREFIX//\//\\/}"'\1'"${DELETESTACKTRACELOCATIONS_FUNCTIONNAME_SUFFIX//\//\\/}"'()/
    s/ in / '"${DELETESTACKTRACELOCATIONS_INTRO_PREFIX//\//\\/}"'in'"${DELETESTACKTRACELOCATIONS_INTRO_SUFFIX//\//\\/}"' /
    s/^'"${DELETESTACKTRACELOCATIONS_PREFIX_PATTERN}"'->> \+\|^|/'"${DELETESTACKTRACELOCATIONS_INTRO_PREFIX//\//\\/}"'&'"${DELETESTACKTRACELOCATIONS_INTRO_SUFFIX//\//\\/}"'/

    P
    s/^[^\n]*\n//
    b printGroovyStackTraceLocations
}

b begin
' "$@"
