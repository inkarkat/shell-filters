#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--as count|dot|ellipsis] [-s|--skip PATTERN [...]] (-e|--regexp|-a|--accumulate|-m|--match|-M|--match-accumulated PATTERN [-r|--replacement REPLACEMENT]) [...] [--] FILE [...][-?|-h|--help]'
    echo
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-u|--unbuffered [--as count|dot|ellipsis|flash|spinner|sweep] [...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Condense identical consecutive lines / matches of PATTERNs in consecutive lines,
potentially with the duplication signaled by appending a count, trailing period,
spinner, etc.
Useful to reduce the verbosity of simplistic applications that repeatedly print
the same message or log retry attempts.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --as count	    Append a count of occurrences to the line.
    --as dot	    Append a period for each occurrence to the line.
    --as ellipsis   Append an ellipis ([...]) once.
    --as flash	    Briefly reverse and unreverse the line to highlight it.
    --as spinner    Change a spinner control after the line for each occurrence.
    --as sweep	    Change a Knight Rider-alike sweeping control after the line
		    for each occurrence.
    --regexp|-e PATTERN	    Collapse consecutive lines that all match PATTERN.
			    Other matches or lines reset counting.
    --accumulate|-a PATTERN Collapse any lines that match PATTERN; counts from
			    previous occurrences are kept.
    --match|-m PATTERN	    Collapse consecutive identical matches of PATTERN.
			    Different matches are treated as different
			    occurrences. If no PATTERN option is specified, all
			    identical consecutive lines are condensed, as if
			    --match '.*' were given.
    --match-accumulated|-M PATTERN
			    Collapse any identical matches of PATTERN.
    --replacement|-r REPLACEMENT
			    Use REPLACEMENT (that can refer to PATTERN capture
			    groups via \1 etc.) instead of the original line.
    --skip|-s PATTERN	    Ignore (but still print) lines that match PATTERN,
			    so that these don't disrupt the processing of
			    surrounding lines.
    --unbuffered|-u Immediately output each read line and use backspaces / ANSI
		    escape sequences to update counts / spinner / flashing.
		    Without this,  consecutive duplicate lines will be silently
		    consumed until a different line is encountered.
All PATTERNs are AWK-style extended regular expressions.

Example:
HELPTEXT
    printf 'find / -name %q 2>&1 | %q %s\n' "$(basename "$1")" "$(basename "$1")" "-u -e 'Permission denied$'"
}

: ${COLLAPSEDUPLICATES_FLASH_ON_TIME:=0.1}
: ${COLLAPSEDUPLICATES_FLASH_OFF_TIME:=0.2}
render=
skipPattern=
typeset -a types=()
typeset -a patterns=()
typeset -a replacements=()
isBuffered=t
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--as)		shift; render="$1"; shift;;
	--skip|-s)	shift; skipPattern="${skipPattern}${skipPattern:+|}${1:?}"; shift;;
	--regexp|-e)		shift; types+=(reset); patterns+=("${1:?}"); replacements+=('&'); shift;;
	--accumulate|-a)	shift; types+=(accumulate); patterns+=("${1:?}"); replacements+=('&'); shift;;
	--match|-m)		shift; types+=(match); patterns+=("${1:?}"); replacements+=('&'); shift;;
	--match-accumulated|-M)	shift; types+=(match-accumulate); patterns+=("${1:?}"); replacements+=('&'); shift;;
	--replacement|-r)	shift
				if [ ${#types[@]} -eq 0 ]; then
				    echo "Need -e|--regexp|-a|--accumulate|-m|--match|-M|--match-accumulated PATTERN before passing REPLACEMENT."
				    echo
				    printUsage "$0"
				    exit 2
				fi >&2
				replacements[-1]="$1"
				shift
				;;
	--unbuffered|-u)	shift; isBuffered=;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ ${#types[@]} -eq 0 ]; then
    # Default to consending identical consecutive lines.
    types+=(match); patterns+=('.*'); replacements+=('&')
fi
replacements+=('')  # Add one empty element so that split() will yield at least one in case of a single empty one.

IFS=$'\n'
exec awk \
    -v "render=$render" \
    -v "isBuffered=$isBuffered" \
    -v "typeList=${types[*]}" \
    -v "patternList=${patterns[*]//\\/\\\\}" \
    -v "replacementList=${replacements[*]//\\/\\\\}" \
    -v "skipPattern=${skipPattern//\\/\\\\}" \
    -v "flashOnTime=${COLLAPSEDUPLICATES_FLASH_ON_TIME}" \
    -v "flashOffTime=${COLLAPSEDUPLICATES_FLASH_OFF_TIME}" \
'
BEGIN {
    FS = "\n"

    SPINNER="/-\\|"

    SWEEPCOMMON=1
    SWEEPSTART="[    ]"
    SWEEPS[0]="[*   ]"
    SWEEPS[1]="[-*  ]"
    SWEEPS[2]="[ -* ]"
    SWEEPS[3]="[  -*]"
    SWEEPS[4]="[   *]"
    SWEEPS[5]="[  *-]"
    SWEEPS[6]="[ *- ]"
    SWEEPS[7]="[*-  ]"
    SWEEPSLEN=8

    N = split(typeList, types)
    if (split(patternList, patterns) != N) {
	print "Assert: Mismatch in number of types and patterns." > "/dev/stderr"
	exit 3
    }
    if (split(replacementList, replacements) != N + 1) {
	print "Assert: Mismatch in number of replacements and patterns." > "/dev/stderr"
	exit 3
    }
}
function finishLine()
{
    if (hold != "") {
	if (isBuffered) {
	    print hold
	} else {
	    printf "%s", hold
	}
	hold = ""
    }
}
function nextLine()
{
    previousLine = $0
    next
}
function matchstr(pattern, text)
{
    match(text, pattern)
    return substr(text, RSTART, RLENGTH)
}
function replace(line, pattern, replacement)
{
    return (replacement == "&" ? line : gensub(pattern, replacement, "g", line))
}
function flash(text, prefix)
{
    system("sleep " flashOffTime)
    printf prefix "[07m%s[0m", text
    fflush()
    system("sleep " flashOnTime)
    return "\r" text
}
function spin(count)
{
    return substr(SPINNER, 1 + ((count - 2) % length(SPINNER)), 1)
}
function sweep(count)
{
    return (count == 2 ? SWEEPSTART : SWEEPS[(count - 3) % SWEEPSLEN])
}
function multiply(char, count,      tmp, i)
{
    for (i = 1; i <= count; ++i) tmp = tmp char
    return tmp
}
function pad(text, padding)
{
    return (text == "" ? "" : padding)
}
function renderCountFull(text, count, prefix,      tmp )
{
    switch (render) {
	case "":
	    return prefix text
	case "count":
	    sub(/\s*$/, "", text)
	    return prefix text pad(text, " ") "(" count ")"
	case "dot":
	    sub(/\s*\.*$/, "", text)
	    for (tmp = ""; count > 0; count--)
		tmp = tmp "."
	    return prefix text tmp
	case "ellipsis":
	    sub(/\s*$/, "", text)
	    return prefix text pad(text, " ") "[...]"
	case "flash":
	    return flash(text, prefix)
	case "spinner":
	    sub(/\s*$/, "", text)
	    return prefix text pad(text, " ") spin(count)
	case "sweep":
	    sub(/\s*$/, "", text)
	    return prefix text pad(text, " ") sweep(count)
	default:
	    print "Assert: Invalid render type: " render > "/dev/stderr"
	    exit 3
    }
}
function deleteCount(count,      offset)
{
    offset = (count ~ /^10+$/ ? -1 : 0)
    return substr("", 0, length(count) + offset)
}
function renderCountDelta(text, count,      tmp)
{
    switch (render) {
	case "":
	    return ""
	case "count":
	    return (count <= 2 ? " (" count ")" : "" deleteCount(count) count ")")
	case "dot":
	    return (count == 1 ? "" : ".")
	case "ellipsis":
	    return (count == 2 ? " [...]" : "")
	case "flash":
	    return flash(text, "\r")
	case "spinner":
	    return (count == 1 ? "" : (count == 2 ? " " : "") spin(count))
	case "sweep":
	    return (count == 1 ? "" : (count == 2 ? " " sweep(count) : multiply("", length(SWEEPSTART) - SWEEPCOMMON) substr(sweep(count), SWEEPCOMMON + 1)))
	default:
	    print "Assert: Invalid render type: " render > "/dev/stderr"
	    exit 3
    }
}
function collapse(isBelongsToDifferentSet, current, pattern, replacement, previous, compare, count)
{
    if (isBelongsToDifferentSet) finishLine()
    if (isBuffered) {
	if (count == 1) {
	    hold = current	# First (tentative) match, take as-is; no replacement yet.
	} else {
	    # Use the first match, but replace.
	    hold = renderCountFull(replace(previousMatchingLine, pattern, replacement), count)
	}
    } else {
	hold = "\n"
	if (count == 1) {
	    printf "%s", current
	} else if (previous == compare && replacement == "&") {
	    printf "%s", renderCountDelta(replace(current, pattern, replacement), count)
	} else {
	    printf "%s", renderCountFull(replace(current, pattern, replacement), count, "\r")
	}
	fflush()
    }

    nextLine()
}
function recall(current, pattern, replacement, count)
{
    finishLine()

    if (isBuffered) {
	hold = renderCountFull(replace(previousMatchingLine, pattern, replacement), count)
    } else {
	hold = "\n"
	printf "%s", renderCountFull(replace(current, pattern, replacement), count)
	fflush()
    }

    nextLine()
}
{
    if (skipPattern == "" || $0 !~ skipPattern) {
	for (i = 1; i <= N; i++) {
	    switch (types[i]) {
		case "reset":
		    if ($0 ~ patterns[i]) {
			if (patterns[i] == previousPattern) {
			    collapse(0, $0, patterns[i], replacements[i], previousMatchingLine, $0, ++count)
			} else {
			    count = 1
			    previousMatch = matchstr(patterns[i], $0)
			    previousMatchingLine = $0
			    previousPattern = patterns[i]
			    collapse(1, $0, patterns[i], replacements[i], previousMatchingLine, $0, count)
			}
		    }
		    break
		case "accumulate":
		    if ($0 ~ patterns[i]) {
			patternCounts[patterns[i]] += 1
			if (patterns[i] == previousPattern) {
			    # Consecutive match, collapse.
			    collapse(0, $0, patterns[i], replacements[i], previousMatchingLine, $0, patternCounts[patterns[i]])
			} else {
			    previousMatch = matchstr(patterns[i], $0)
			    previousMatchingLine = $0
			    previousPattern = patterns[i]
			    if (patternCounts[patterns[i]] == 1) {
				# First match overall.
				collapse(1, $0, patterns[i], replacements[i], previousMatchingLine, $0, patternCounts[patterns[i]])
			    } else {
				# Match that is different from previous one, recall
				# with count.
				recall($0, patterns[i], replacements[i], patternCounts[patterns[i]])
			    }
			}
		    }
		    break
		case "match":
		    if ($0 ~ patterns[i]) {
			previousPattern = patterns[i]
			if (matchstr(patterns[i], $0) == previousMatch) {
			    collapse(0, $0, patterns[i], replacements[i], previousLine, $0, ++count)
			} else {
			    count = 1
			    previousMatch = matchstr(patterns[i], $0)
			    previousMatchingLine = $0
			    collapse(1, $0, patterns[i], replacements[i], previousLine, $0, count)
			}
		    }
		    break
		case "match-accumulate":
		    if ($0 ~ patterns[i]) {
			previousPattern = patterns[i]
			currentMatch = matchstr(patterns[i], $0)
			matchCounts[currentMatch] += 1
			if (currentMatch == previousMatch) {
			    # Consecutive occurrence, collapse.
			    collapse(0, $0, patterns[i], replacements[i], previousLine, $0, matchCounts[currentMatch])
			} else {
			    previousMatch = currentMatch
			    previousMatchingLine = $0
			    previousPattern = patterns[i]
			    if (matchCounts[currentMatch] == 1) {
				# First occurrence overall.
				collapse(1, $0, patterns[i], replacements[i], previousLine, $0, 1)
			    } else {
				# Occurrence that is different from previous one, recall
				# with count.
				recall($0, patterns[i], replacements[i], matchCounts[currentMatch])
			    }
			}
		    }
		    break
		default:
		    print "Assert: Invalid type: " types[i] > "/dev/stderr"
		    exit 3
	    }
	}
    }

    previousMatch = ""
    previousMatchingLine = ""
    previousPattern = ""
    finishLine()
    print
    nextLine()
}
END {
    finishLine()
}
' "$@"
