#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--as count|dot|ellipsis] [-s|--skip PATTERN [...]] (-e|--regexp|-a|--accumulate|-m|--match|-M|--match-accumulated PATTERN [-r|--replacement REPLACEMENT]) [...] [--] FILE [...][-?|-h|--help]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-u|--unbuffered [--as count|dot|ellipsis|flash|spinner] [...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Condense identical consecutive lines / matches of PATTERNs in consecutive lines,
potentially with the duplication signaled by appending a count, trailing period,
spinner, etc.
Useful to reduce the verbosity of simplistic applications that repeatedly print
the same message or log retry attempts.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --as count	    Append a count of occurrences to the line.
    --as dot	    Append a period for each occurrence to the line.
    --as ellipsis   Append an ellipis ([...]) once.
    --as flash	    Briefly reverse and unreverse the line to highlight it.
    --as spinner    Change a spinner control after the line for each occurrence.
    --regexp|-e PATTERN	    Collapse consecutive lines that all match PATTERN.
			    Other matches or lines reset counting.
    --accumulate|-a PATTERN Collapse any lines that match PATTERN; counts from
			    previous occurrences are kept.
    --match|-m PATTERN	    Collapse consecutive identical matches of PATTERN.
			    Different matches are treated as different
			    occurrences. If no PATTERN option is specified, all
			    identical consecutive lines are condensed, as if
			    --match '.*' were given.
    --match-accumulated|-M PATTERN
			    Collapse any identical matches of PATTERN.
    --replacement|-r REPLACEMENT
			    Use REPLACEMENT (that can refer to PATTERN capture
			    groups via \1 etc.) instead of the original line.
    --skip|-s PATTERN	    Ignore (but still print) lines that match PATTERN,
			    so that these don't disrupt the processing of
			    surrounding lines.
    --unbuffered|-u Immediately output each read line and use backspaces / ANSI
		    escape sequences to update counts / spinner / flashing.
		    Without this,  consecutive duplicate lines will be silently
		    consumed until a different line is encountered.
Example:
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" '--foo bar /tmp/foobar'
}

render=
typeset -a types=()
typeset -a patterns=()
typeset -a replacements=()
isBuffered=t
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--as)		shift; render="$1"; shift;;
	--skip|-s)	shift; skipPattern="${skipPattern}${skipPattern:+|}$1"; shift;;
	--regexp|-e)		shift; types+=(reset); patterns+=("$1"); replacements+=('&'); shift;;
	--accumulate|-a)	shift; types+=(accumulate); patterns+=("$1"); replacements+=('&'); shift;;
	--match|-m)		shift; types+=(match); patterns+=("$1"); replacements+=('&'); shift;;
	--match-accumulated|-M)	shift; types+=(match-accumulate); patterns+=("$1"); replacements+=('&'); shift;;
	--replacement|-r)	shift; replacements[-1]="$1"; shift;;
	--unbuffered|-u)	shift; isBuffered=;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printShortUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ ${#types[@]} -eq 0 ]; then
    # Default to consending identical consecutive lines.
    types+=(match); patterns+=('.*'); replacements+=('&')
fi

IFS=$'\n'
awk \
    -v "render=$render" \
    -v "isBuffered=$isBuffered" \
    -v typeList="${types[*]}" \
    -v patternList="${patterns[*]//\\/\\\\}" \
    -v replacementList="${replacements[*]//\\/\\\\}" \
'
BEGIN {
    FS = "\n"
    N = split(typeList, types)
    if (split(patternList, patterns) != N) {
	print "Assert: Mismatch in number of types and patterns." > "/dev/stderr"
	exit 3
    }
    if (split(replacementList, replacements) != N) {
	print "Assert: Mismatch in number of replacements and patterns." > "/dev/stderr"
	exit 3
    }
}
function finishLine()
{
    if (hold != "") {
	print hold
	hold = ""
    }
}
function replace(line, pattern, replacement)
{
    # TODO
    return line
}
function renderCount( text, count,      tmp )
{
    switch (render) {
	case "":
	    return text
	case "count":
	    sub(/\s*$/, "", text)
	    return text " (" count ")"
	case "dot":
	    sub(/\s*\.*$/, "", text)
	    for (tmp = ""; count > 0; count--)
		tmp = tmp "."
	    return text tmp
	case "ellipsis":
	    sub(/\s*$/, "", text)
	    return text " [...]"
	default:
	    print "Assert: Invalid render type: " render > "/dev/stderr"
	    exit 3
    }
}
function collapse(isBelongsToDifferentSet, current, pattern, replacement, count)
{
    if (isBelongsToDifferentSet) finishLine()
# if (isBuffered) {
    if (count == 1) {
	hold = current	# First (tentative) match, take as-is; no replacement yet.
    } else {
	# Use the first match, but replace.
	hold = renderCount(replace(previousMatch, pattern, replacement), count)
    }
    next
}
function recall(current, pattern, replacement, count)
{
    finishLine()

    hold = renderCount(replace(previousMatch, pattern, replacement), count)

    next
}
{
    for (i = 1; i <= N; i++) {
	switch (types[i]) {
	    case "reset":
		if ($0 ~ patterns[i]) {
		    if (patterns[i] == previousPattern) {
			collapse(0, $0, patterns[i], replacements[i], ++count)
		    } else {
			count = 1
			previousMatch = $0
			previousPattern = patterns[i]
			collapse(1, $0, patterns[i], replacements[i], count)
		    }
		}
		break
	    case "accumulate":
		if ($0 ~ patterns[i]) {
		    patternCounts[patterns[i]] += 1
		    if (patterns[i] == previousPattern) {
			# Consecutive match, collapse.
			collapse(0, $0, patterns[i], replacements[i], patternCounts[patterns[i]])
		    } else {
			previousMatch = $0
			previousPattern = patterns[i]
			if (patternCounts[patterns[i]] == 1) {
			    # First match overall.
			    collapse(1, $0, patterns[i], replacements[i], patternCounts[patterns[i]])
			} else {
			    # Match that is different from previous one, recall
			    # with count.
			    recall($0, patterns[i], replacements[i], patternCounts[patterns[i]])
			}
		    }
		}
		break
	    case "match":
		if ($0 ~ patterns[i]) {
		    previousPattern = patterns[i]
		    if ($0 == previousMatch) {
			collapse(0, $0, patterns[i], replacements[i], ++count)
		    } else {
			count = 1
			previousMatch = $0
			collapse(1, $0, patterns[i], replacements[i], count)
		    }
		}
		break
	    case "match-accumulate":
		if ($0 ~ patterns[i]) {
		    previousPattern = patterns[i]
		    matchCounts[$0] += 1
		    if ($0 == previousMatch) {
			# Consecutive occurrence, collapse.
			collapse(0, $0, patterns[i], replacements[i], matchCounts[$0])
		    } else {
			previousMatch = $0
			previousPattern = patterns[i]
			if (matchCounts[$0] == 1) {
			    # First occurrence overall.
			    collapse(1, $0, patterns[i], replacements[i], 1)
			} else {
			    # Occurrence that is different from previous one, recall
			    # with count.
			    recall($0, patterns[i], replacements[i], matchCounts[$0])
			}
		    }
		}
		break
	    default:
		print "Assert: Invalid type: " types[i] > "/dev/stderr"
		exit 3
	}
    }

    previousMatch = ""
    previousPattern = ""
    finishLine()
    print
}
END {
    finishLine()
}
' "$@"
