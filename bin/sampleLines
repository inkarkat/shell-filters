#!/bin/bash
shopt -qs extglob

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--reset-on PATTERN] [-i|--inline [-c|--clear] [-k|--keep-reset]] [-s|--summarize WHAT[,PLURAL-WHAT] --summary-only] [-t|--timespan TIMESPAN[SUFFIX]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Select and print a line from standard input only once every second / TIMESPAN;
discard additional lines.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --reset-on|-r PATTERN
			Reset the sampling interval on lines matching PATTERN,
			and and unconditionally print these lines.
    --inline|-i		Overwrite the existing terminal line instead of
			accumulating the sampled lines in the output.
    --clear|-c		Also clear the single-line output after all input has
			been processed (so nothing remains to be seen, all
			samples were temporary only).
    --keep-reset|-k	Do not overwrite the existing sample line for reset
			lines. This has the effect of keeping a log of all reset
			lines (which could be informative headers or some other
			crucial context), and continuing the inline sampling
			below.
    --summarize|-s WHAT[,PLURAL-WHAT]
			Before printing selected output, also summarize the
			amount of lines (characterized as WHAT, e.g. "line",
			"file", you can also pass a separate (non-regular)
			plural form: "entry,entries") that were skipped before
			the current sample.
    --summary-only	Instead of printing summary and selected output, just
			summarize the amount of lines.
HELPTEXT
}

prefix=
suffix='\n'
finalizer=
resetPattern=
isKeepReset=
isInline=
isClear=
summarizeWhat=
summarizeWhatPlural=
isSummaryOnly=
timespan=1
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--reset-pattern|-r)
			shift; resetPattern="$1"; shift;;
	--keep-reset|-k)
			shift; isKeepReset=t;;
	--inline|-i)	shift; isInline=t; prefix='[1G[2K'; suffix=; finalizer='\n';;
	--clear|-c)	shift; isClear=t;;
	--summarize|-s)	shift
			case "$1" in
			    *,*)    summarizeWhat="${1%%,*}"
				    summarizeWhatPlural="${1#*,}"
				    ;;
			    *)	    summarizeWhat="$1"
				    summarizeWhatPlural="${1}s"
				    ;;
			    esac
			shift
			;;
	--summary-only)	shift; isSummaryOnly=t;;
	--timespan|-t)	shift
			case "$1" in
			    +([0-9])?(s))   timespan="${1%s}";;
			    +([0-9])m)	    timespan=$((${1%m} * 60));;
			    +([0-9])h)	    timespan=$((${1%h} * 3600));;
			    +([0-9])d)	    timespan=$((${1%d} * 86400));;
			esac
			shift
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
[ "$isClear" ] && finalizer='[1G[2K'

SECONDS=0
let previousCount=-1
let total=0
let count=0
isAgain=

while IFS=$'\n' read -r line || { suffix=; [ -n "$line" ]; }
do
    let count+=1
    let total+=1
    isTakeThisLine=''
    keepResetSuffix=
    if [ "$resetPattern" ] && [[ "$line" =~ $resetPattern ]]; then
	isTakeThisLine=t
	if [ -n "$isInline" -a -n "$isKeepReset" ]; then
	    keepResetSuffix='\n'
	fi
    fi

    if [ -n "$isTakeThisLine" -o $SECONDS -ge $timespan ]; then
	sample="$line"
	if [ "$summarizeWhat" ]; then
	    if [ "$isSummaryOnly" ]; then
		summarySuffix=
	    else
		summarySuffix=' omitted'
		let count-=1    # Don't include the current line (that is printed) in the count.
	    fi

	    if [ $count -eq 0 ]; then
		summary=
	    elif [ $count -eq 1 ]; then
		summary="$count ${summarizeWhat}$summarySuffix"
	    else
		summary="$count ${summarizeWhatPlural}$summarySuffix"
	    fi

	    if [ -n "$summary" -a -n "$isInline" -a $previousCount -eq $count -a -z "$isAgain" ]; then
		# As the current line is overwritten, updates with the same
		# count could not be distinguished. For better usability, append
		# the word "again" on every other update with the same count, so
		# that it toggles on and off for successive same counts.
		isAgain=t
		summary="$summary again"
	    else
		isAgain=
	    fi

	    if [ "$isSummaryOnly" ]; then
		sample="$summary"
	    elif [ ! "$isTakeThisLine" ]; then
		sample="${summary:+"(${summary}) "}$line"
	    fi
	fi

	printf "${prefix}%s${suffix}${keepResetSuffix}" "$sample"

	SECONDS=0
	let previousCount=$count
	let count=0
    fi
done

if [ "$summarizeWhat" ]; then
    if [ $total -eq 1 ]; then
	summary="$total $summarizeWhat"
    else
	summary="$total $summarizeWhatPlural"
    fi
    printf "${prefix}%s${suffix}" "$summary in total"
fi
if [ "$finalizer" ]; then
    printf "$finalizer"
fi
