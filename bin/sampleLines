#!/bin/bash
shopt -qs extglob

if [ -t 1 ]; then
    : ${SAMPLELINES_RESET_PREFIX=[01m}
    : ${SAMPLELINES_RESET_SUFFIX=[0m}
    : ${SAMPLELINES_APPEND_RESET_PREFIX=[01m}
    : ${SAMPLELINES_APPEND_RESET_SUFFIX='[0m '}
    : ${SAMPLELINES_SUMMARY_PREFIX=[36m}
    : ${SAMPLELINES_SUMMARY_SUFFIX='[0m '}
else
    : ${SAMPLELINES_RESET_PREFIX=}
    : ${SAMPLELINES_RESET_SUFFIX=}
    : ${SAMPLELINES_APPEND_RESET_PREFIX=}
    : ${SAMPLELINES_APPEND_RESET_SUFFIX=' '}
    : ${SAMPLELINES_SUMMARY_PREFIX=}
    : ${SAMPLELINES_SUMMARY_SUFFIX=' '}
fi


printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-r|--reset-on PATTERN] [-i|--inline-or-non|--inline-or-passthrough|-I|--inline-always [--inline-prefix IP] [-c|--clear] [-a|--append-reset|-k|--keep-reset]] [-s|--summarize WHAT[,PLURAL-WHAT] --summary-only] [-t|--timespan TIMESPAN[SUFFIX][ADJUSTMENT]] [-T|--initial-delay TIMESPAN[SUFFIX]] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Select and print a line from standard input only once every second / TIMESPAN;
discard additional lines.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --reset-on|-r PATTERN
			Reset the sampling interval on lines matching PATTERN,
			and and unconditionally print these lines.
    --inline-or-none|-i	Overwrite the existing terminal line instead of
			accumulating the sampled lines in the output.
			When not outputting to a terminal, suppress all output.
    --inline-or-passthrough
			Like above, but when not outputting to a terminal,
			forward all input unfiltered.
    --inline-always|-I	Like above, but also overwrite existing terminal lines
			even when not outputting to a terminal.
    --inline-prefix IP	Put IP before each inline output of a sampled line.
    --clear|-c		Also clear the single-line output after all input has
			been processed (so nothing remains to be seen, all
			samples were temporary only).
    --append-reset|-a	Append the reset line to all following inline updates,
			as a kind of context.
    --keep-reset|-k	Do not overwrite the existing sample line for reset
			lines. This has the effect of keeping a log of all reset
			lines (which could be informative headers or some other
			crucial context), and continuing the inline sampling
			below.
    --summarize|-s WHAT[,PLURAL-WHAT]
			Before printing selected output, also summarize the
			amount of lines (characterized as WHAT, e.g. "line",
			"file", you can also pass a separate (non-regular)
			plural form: "entry,entries") that were skipped before
			the current sample.
    --summary-only	Instead of printing summary and selected output, just
			summarize the amount of lines.
    --timespan|-t TIMESPAN[SUFFIX]
			Print a line every TIMESPAN instead of every second.
			SUFFIX may be 'ms' for milliseconds, 's' for seconds
			(the default), 'm' for minutes, 'h' for hours or 'd' for
			days. ADJUSTMENT can change the original value after
			every iteration. It starts with either + or -, followed
			by TIMESPAN, optionally followed by either SUFFIX or %.
			For example, 10m+30s starts with 10 minutes and then
			increases that by 30 seconds on every iteration. 10-5%
			starts with 10 seconds and then continually decreases
			that by 5 percent.
    --initial-delay|-T TIMESPAN[SUFFIX]
			Wait for TIMESPAN before printing anything. By default,
			the first line is printed immediately.
Example:
HELPTEXT

    printf 'tail -f file | %q %s\n' "$(basename "$1")" '--inline-or-none --clear >&2'
}
timeToSeconds()
{
    case "$1" in
	+([0-9])ms)	if [ -n "$adjustment" ]; then
			    echo >&2 'ERROR: Cannot combine millisecond interval with adjustment.'
			    exit 2
			fi
			time="00${1%ms}"; time="0${time%???}.${time:$((${#time}-3))}"; time="${time/#+(0)/0}"
			;;
	+([0-9])?(s))   time="${1%s}";;
	+([0-9])m)	time=$((${1%m} * 60));;
	+([0-9])h)	time=$((${1%h} * 3600));;
	+([0-9])d)	time=$((${1%d} * 86400));;
	*)		printf >&2 'ERROR: Illegal timespan: %s\n' "$1"; exit 2;;
    esac
    printf %s "$time"
}
timeWithAdjustmentToSeconds()
{
    local adjustment="${1##+([0-9])?([smhd]|ms)}"
    local time="${1:0:$((${#1} - ${#adjustment}))}"
    if [ -z "$time" ]; then
	printf >&2 'ERROR: Empty timespan: %s\n' "$time"; exit 2;
    fi
    case "$adjustment" in
	'')			;;
	[+-]+([0-9])?([smhd%]))	;;
	*)  printf >&2 'ERROR: Illegal adjustment: %s\n' "$adjustment"; exit 2;;
    esac
    time="$(timeToSeconds "$time" "$2")" || exit $?
    printf '%s\t%s\n' "$time" "$adjustment"
}
adjust()
{
    local var="${1?}"; shift
    local adjustment="$1"; shift
    eval "local value=\$$var"
    local newValue
    case "$adjustment" in
	'')	    return;;
	[+-]0?(%))  return;;
	++([0-9]))  newValue="$((value + ${adjustment#+}))";;
	-+([0-9]))  newValue="$((value - ${adjustment#-}))";;
	[+-]+([0-9])%)
		    # As Bash doesn't support floating point math yet, multiply
		    # with 100, add the percentage change, and divide back and
		    # round.
		    # To avoid that the rounding truncates small changes and
		    # therefore never lets the real value change, store the cent
		    # value in a global variable, and re-use that instead.
		    eval "local centValue=\$${var}CentValue"
		    [ "$centValue" ] || centValue=$((value * 100))

		    local change=$((${adjustment:1:-1} * value))
		    [ "${adjustment:0:1}" = '+' ] && let centValue+=$change || let centValue-=$change
		    newValue=$(((centValue + 50) / 100))

		    eval "${var}CentValue=\$centValue"
		    ;;
	*)	    printf >&2 'ASSERT: Invalid adjustment: %s\n' "$adjustment"; exit 3;;
    esac

    [ $newValue -lt 0 ] && newValue=0
    # Use this instead if no delay at all does not make sense.
    #[ $newValue -le 0 ] && newValue=1
    eval "$var=\$newValue"
}

prefix=
suffix='\n'
finalizer=
resetPattern=
resetAction=
isInline=
inlinePrefix=
isClear=
summarizeWhat=
summarizeWhatPlural=
isSummaryOnly=
timespan=1
timespanAdjustment=
initialDelay=0
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--reset-on|-r)
			shift; resetPattern="$1"; shift;;
	--append-reset|-a)
			shift; resetAction=append;;
	--keep-reset|-k)
			shift; resetAction=keep;;
	--inline-always|-I)
			shift; isInline=t;;
	--inline-or-passthrough)
			shift
			[ -t 1 ] || exec cat
			isInline=t
			;;
	--inline-or-none|-i)
			shift
			[ -t 1 ] || exec cat > /dev/null
			isInline=t
			;;
	--inline-prefix)
			shift; inlinePrefix="$1"; shift;;
	--clear|-c)	shift; isClear=t;;
	--summarize|-s)	shift
			case "$1" in
			    *,*)    summarizeWhat="${1%%,*}"
				    summarizeWhatPlural="${1#*,}"
				    ;;
			    *)	    summarizeWhat="$1"
				    summarizeWhatPlural="${1}s"
				    ;;
			    esac
			shift
			;;
	--summary-only)	shift; isSummaryOnly=t;;
	--timespan|-t)	shift; < <(timeWithAdjustmentToSeconds "$1") IFS=$'\t' read -r timespan timespanAdjustment || exit 2; shift;;
	--initial-delay|-T)
			shift; initialDelay="$(timeToSeconds "$1")" || exit $?; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ ! "$isInline" -a -n "$inlinePrefix" ]; then
    echo >&2 'ERROR: --inline-prefix only works in conjunction with an --inline-... option.'
    echo >&2
    printShortUsage "$0" >&2
    exit 2
fi
if [ "$isInline" ]; then prefix="[1G[2K$inlinePrefix"; suffix=; finalizer='\n'; fi
[ "$isClear" ] && finalizer='[1G[2K'

case "${timespan}${initialDelay}" in
    *.*)
	resetTime()
	{
	    if [ $# -eq 0 ]; then
		IFS='.' read startEpoch startNanos <<<"$(date +%s.%N)"
	    else
		IFS='.' read startEpoch startNanos <<<"$(awk 'BEGIN{ printf "%.3f\n", ARGV[1] - ARGV[2] + ARGV[3]; }' "$(date +%s.%N)" "${1:-0}" "${2:-0}")"
	    fi
	}
	case "$timespan" in
	    *.*)
		isExpired()
		{
		    IFS='.' read endEpoch endNanos <<<"$(date +%s.%N)"
		    local startMillis=10#${startNanos:0:3}; local endMillis=10#${endNanos:0:3}; local diffMillis=$(((endEpoch - startEpoch) * 1000))
		    [ $((endMillis + diffMillis - startMillis)) -ge ${timespan/./} ]
		}
		;;
	    *)
		isExpired()
		{
		    IFS='.' read endEpoch endNanos <<<"$(date +%s.%N)"
		    local startMillis=10#${startNanos:0:3}; local endMillis=10#${endNanos:0:3}; local diffMillis=$(((endEpoch - startEpoch) * 1000))
		    [ $((endMillis + diffMillis - startMillis)) -ge ${timespan:?}000 ]
		}
		;;
	esac
	;;
    *)
	resetTime()
	{
	    if [ $# -eq 0 ]; then
		SECONDS=0
	    else
		SECONDS=$((${1:-0} - ${2:-0}))
	    fi
	}
	isExpired()
	{
	    [ $SECONDS -ge $timespan ]
	}
	;;
esac

originalTimespan=$timespan
resetTime "$timespan" "$initialDelay"
let previousCount=-1
let total=0
let count=0
isAgain=
isFirstExpiry=t

keepResetPrefix=
while IFS=$'\n' read -r line || { [ "$summarizeWhat" ] || suffix=; [ -n "$line" ]; }
do
    let count+=1
    let total+=1
    isTakeThisLine=''
    keepResetSuffix=
    if [ "$resetPattern" ] && [[ "$line" =~ $resetPattern ]]; then
	isTakeThisLine=t
	line="${SAMPLELINES_RESET_PREFIX}${line}${SAMPLELINES_RESET_SUFFIX}"
	[ -n "$isInline" ] && case "$resetAction" in
	    append) keepResetPrefix=;;	# The current iteration already has the header in the line. Only prepend the header to subsequent samples.
	    keep)   keepResetSuffix='\n';;
	esac
	timespan=$originalTimespan
	isFirstExpiry=t
    fi

    hasExpired=; isExpired && hasExpired=t
    if [ -n "$isTakeThisLine" ] || [ "$hasExpired" ]; then
	sample="$line"
	if [ "$summarizeWhat" ]; then
	    if [ "$isSummaryOnly" ]; then
		summarySuffix=
	    else
		summarySuffix=' omitted'
		let count-=1    # Don't include the current line (that is printed) in the count.
	    fi

	    if [ $count -eq 0 ]; then
		summary=
	    elif [ $count -eq 1 ]; then
		summary="$count ${summarizeWhat}$summarySuffix"
	    else
		summary="$count ${summarizeWhatPlural}$summarySuffix"
	    fi

	    if [ -n "$summary" -a -n "$isInline" -a $previousCount -eq $count -a -z "$isAgain" ]; then
		# As the current line is overwritten, updates with the same
		# count could not be distinguished. For better usability, append
		# the word "again" on every other update with the same count, so
		# that it toggles on and off for successive same counts.
		isAgain=t
		summary="$summary again"
	    else
		isAgain=
	    fi

	    if [ "$isSummaryOnly" ]; then
		sample="$summary"
	    elif [ ! "$isTakeThisLine" ]; then
		sample="${summary:+"${SAMPLELINES_SUMMARY_PREFIX}(${summary})${SAMPLELINES_SUMMARY_SUFFIX}"}$line"
	    fi
	fi

	printf "${prefix}%s%s${suffix}${keepResetSuffix}" "$keepResetPrefix" "$sample"

	resetTime
	[ "$hasExpired" ] && [ ! "$isFirstExpiry" ] && adjust timespan "$timespanAdjustment"
	isFirstExpiry=
	let previousCount=$count
	let count=0
	[ -n "$isInline" -a -n "$isTakeThisLine" -a "$resetAction" = append ] && \
	    keepResetPrefix="${SAMPLELINES_APPEND_RESET_PREFIX}${line}${SAMPLELINES_APPEND_RESET_SUFFIX}"    # Prepend the header to subsequent samples now.
    fi
done

if [ "$summarizeWhat" ]; then
    if [ $total -eq 1 ]; then
	summary="$total $summarizeWhat"
    else
	summary="$total $summarizeWhatPlural"
    fi
    printf "${prefix}${SAMPLELINES_SUMMARY_PREFIX}%s${SAMPLELINES_SUMMARY_SUFFIX}${suffix}" "$summary in total"
fi
if [ "$finalizer" ]; then
    printf "$finalizer"
fi
