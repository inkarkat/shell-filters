#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '-m|--match PATTERN [-M|--no-match-separated] [-v|--verbose] [-c|--count N|-s|--start-count N|-e|--end-count N] FILE [...] [-?|-h|--help]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Only print the first and last [N] line(s) of adjacent lines where PATTERN has an
identical match (or does not match at all).
    --match|-m PATTERN	    Only print first and last line(s) where PATTERN has
			    an identical match.
    --no-match-separated|-M No matches form a distinct group and are not put
			    together with the current PATTERN match.
    --verbose|-v	    Insert a summary line between first and last
			    occurrences that tells how many inner lines of the
			    block have been filtered away.
    --count|-c N	    Include more than one first and last lines.
    --start-count|-s N	    Separately influence the number of included first
    --end-count|-e N	    and last lines.
All PATTERNs are AWK-style extended regular expressions.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT

HELPTEXT
}

match=
isNoMatchSeparated=
isVerbose=
startCount=1
endCount=1
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--match|-m)	shift; match="$1"; shift;;
	--no-match-separated|-M)
			shift; isNoMatchSeparated=t;;
	--verbose|-v)	shift; isVerbose=t;;
	--count|-c)	shift; startCount="$1"; endCount="$1"; shift;;
	--start-count|-s)	shift; startCount="$1"; shift;;
	--end-count|-e)	shift; endCount="$1"; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ -z "$match" ]; then
    echo >&2 'ERROR: No -m|--match PATTERN passed.'
    echo >&2
    printUsage "$0" >&2
    exit 2
fi

exec awk -v "pattern=$match" -v "isNoMatchSeparated=$isNoMatchSeparated" -v "isVerbose=$isVerbose" -v "startCount=$startCount" -v "endCount=$endCount" '
function printLastMatches(      firstIndex, i) {
    firstIndex = endMatchCount - endCount
    firstIndex = (firstIndex < 0 ? 0 : firstIndex)

    if (firstIndex > 0 && isVerbose) {
	printf "(%s: %d line%s omitted)\n", previousMatchText, firstIndex, (firstIndex == 1 ? "" : "s")
    }

    for (i = firstIndex; i < endMatchCount; i++) {
	print endMatches[i]
    }
}
function processMatch() {
    if (++matchCount <= startCount) {
	print $0
    } else {
	endMatches[endMatchCount++] = $0
    }
}
function compareMatch(matchText) {
    if (matchText != previousMatchText) {
	printLastMatches()

	previousMatchText = matchText
	matchCount = 0
	endMatchCount = 0
	delete endMatches
    }
    processMatch()
}
{
    if (match($0, pattern)) {
	compareMatch(substr($0, RSTART, RLENGTH))
    } else if (isNoMatchSeparated) {
	# Treat unmatched lines as a separate group on its own.
	compareMatch("")
    } else {
	# Unmatched lines belong to the current group.
	processMatch()
    }
}
END {
    printLastMatches()
}
'
