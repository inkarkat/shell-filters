#!/bin/bash
shopt -qs extglob

readonly ATTRIBUTE_COLOR_SYNTAX='[none|bold|underscore|blink|reverse|concealed|faint|italic|rapid|crossed-out|alternate|curly|double-underline|overline] [background black|red|green|yellow|blue|violet|cyan|grey|0-255|#RRGGBB|#RGB|0-255;0-255;0-255] [[foreground] black|red|green|yellow|blue|violet|cyan|grey|0-255|#RRGGBB|#RGB|0-255;0-255;0-255]'
printUsage()
{
    cat <<HELPTEXT
Make all output appear in ATTRIBUTE and/or COLOR (via ANSI escape sequences).
HELPTEXT
    echo
    printf 'Usage: [COLORED_SEPARATE_SEQUENCES=true] %q %s %s %s\n' "$(basename "$1")" '[--color=(always|auto|never)|--no-color]' "$ATTRIBUTE_COLOR_SYNTAX" '[--color=(always|auto|never)|--no-color] -- FILE [...] [-?|-h|--help|--list-colors]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--color=(always|auto|never)|--no-color] [ATTRIBUTE [...]] [COLOR [COLOR]] [--color=(always|auto|never)|--no-color] TEXT [...]'
    echo
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[--color=(always|auto|never)|--no-color] [ATTRIBUTE [...]] [COLOR [COLOR]] [--color=(always|auto|never)|--no-color] [-]'
    echo
    printf 'Usage: %q -g|--get [ATTRIBUTE [...]] [COLOR [COLOR]]\n' "$(basename "$1")"
    printf 'Usage: %q [ATTRIBUTE [...]] [COLOR [COLOR]] -g|--get\n' "$(basename "$1")"
}

isColor=; [ -t 1 ] && isColor=t
isPrintSequence=
typeset -a sequences=()
case "$1" in
    --help|-h|-\?)	shift; printUsage "$0"; exit 0;;
    --no-color|--color=never)
			isColor=; shift;;
    --color=always)	isColor=t; shift;;
    --color=auto)	shift;;
    --color)		case "$2" in
			    always) isColor=t;;
			    never)  isColor=;;
			    auto)   ;;
			    *)	    echo >&2 "ERROR: Invalid --color arg: $2"
				    echo >&2
				    printUsage "$0" >&2
				    exit 2
				    ;;
			esac
			shift; shift
			;;
    --list-colors)	shift; printf '%s\n' "$ATTRIBUTE_COLOR_SYNTAX"; exit 0;;
    --get|-g)		shift; isPrintSequence=t;;
esac
while [ $# -ne 0 ]
do
    case "$1" in
	none)			shift; sequences+=(0);;
	bold)			shift; sequences+=(1);;
	underscore)		shift; sequences+=(4);;
	blink)			shift; sequences+=(5);;
	reverse)		shift; sequences+=(7);;
	concealed)		shift; sequences+=(8);;
	faint)			shift; sequences+=(2);;
	italic)			shift; sequences+=(3);;
	rapid)			shift; sequences+=(6);;
	crossed-out)		shift; sequences+=(9);;
	alternate)		shift; sequences+=(11);;
	curly)			shift; sequences+=(4:3);;
	double-underline)	shift; sequences+=(21);;
	overline)		shift; sequences+=(53);;
	*)			break;;
    esac
done
for ((i = 0; i < 2; i++))
do
    where=
    case "$1" in
	background)	shift; where=4;;
	foreground)	shift; where=3;;
    esac
    case "$1" in
	black)		shift; sequences+=("${where:-3}0");;
	red)		shift; sequences+=("${where:-3}1");;
	green)		shift; sequences+=("${where:-3}2");;
	yellow)		shift; sequences+=("${where:-3}3");;
	blue)		shift; sequences+=("${where:-3}4");;
	violet)		shift; sequences+=("${where:-3}5");;
	cyan)		shift; sequences+=("${where:-3}6");;
	grey)		shift; sequences+=("${where:-3}7");;
	[0-9]?([0-9]?([0-9])))
			sequences+=("${where:-3}8;5;$1"); shift;;
	\#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])
			sequences+=("$(printf "${where:-3}8;2;%d;%d;%d" "0x${1:1:2}" "0x${1:3:2}" "0x${1:5}")"); shift;;
	\#[0-9a-fA-F][0-9a-fA-F][0-9a-fA-F])
			sequences+=("$(printf "${where:-3}8;2;%d;%d;%d" "0x${1:1:1}${1:1:1}" "0x${1:2:1}${1:2:1}" "0x${1:3}${1:3}")"); shift;;
	[0-9]?([0-9]?([0-9]))\;[0-9]?([0-9]?([0-9]))\;[0-9]?([0-9]?([0-9])))
			sequences+=("${where:-3}8;2;$1"); shift;;
	*)  if [ ${#sequences[@]} -eq 0 -o -n "$where" ]; then
		printUsage "$0" >&2
		exit 2
	    fi
	    break
	    ;;
    esac
done
saveIFS="$IFS"
if [ "$COLORED_SEPARATE_SEQUENCES" ]; then
    sequences=("${sequences[@]/#/[}")
    sequences=("${sequences[@]/%/m}")
    IFS=''
    joinedSequences="${sequences[*]}"
else
    IFS=';'
    joinedSequences="[${sequences[*]}m"
fi
IFS="$saveIFS"

case "$1" in
    --no-color|--color=never)
			isColor=; shift;;
    --color=always)	isColor=t; shift;;
    --color=auto)	shift;;
    --color)		case "$2" in
			    always) isColor=t;;
			    never)  isColor=;;
			    auto)   ;;
			    *)	    echo >&2 "ERROR: Invalid --color arg: $2"
				    echo >&2
				    printUsage "$0" >&2
				    exit 2
				    ;;
			esac
			shift; shift
			;;
esac

[ "$isColor" ] \
    && typeset -a COLOR=(sed -e "s/\\[0m/${joinedSequences}/g" -e "s/^/${joinedSequences}/" -e "s/$/[0m/") \
    || typeset -a COLOR=()

if [ $# -eq 0 -a "$isPrintSequence" ] || [ $# -eq 1 -a \( "$1" = --get -o "$1" = -g \) ]; then
    printf %s "$joinedSequences"
    exit 0
elif [ $# -eq 0 -o "$*" = - ] || [ $# -ge 2 -a "$1" = '--' ]; then
    exec "${COLOR[@]:-cat}" "$@"
else
    eval 'printf %s\\n "$*"' "${COLOR:+|}" '"${COLOR[@]}"'
fi
