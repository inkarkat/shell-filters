#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-n|--name NAME|--base-name|--absolute-name] [-N|--not-on-empty] [-k|--keep-indent] FILE [...] [-?|-h|--help]'
    echo
    printf 'Usage: cat FILE | %q %s\n' "$(basename "$1")" '[-n|--name NAME] [-N|--not-on-empty] [-k|--keep-indent]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Insert fragment formatting around each passed FILE / standard input.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --name|-n NAME	Use NAME in the snippet formatting.
    --base-name		Just use the filename of FILE.
    --absolute-name	Expand FILE to the absolute filespec.
    --not-on-empty|-N	Suppress the snip formatting when there's no input / a
			FILE is empty.
    --keep-indent|-k	Put leading whitespace before the PREFIX.
HELPTEXT
}

typeset -a snipArgs=()
typeset -a prefixArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--base-name|--absolute-name|--not-on-empty|-N)
			snipArgs+=("$1"); shift;;
	--name|-n)	snipArgs+=("$1" "$2"); shift; shift;;
	--keep-indent|-k|--skip-empty|-s)
			prefixArgs=("$1"); shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

printf -v prefixArgs ' %q' "${prefixArgs[@]}" '| '
SNIP_PRINTER="prefix $prefixArgs" exec snip "${snipArgs[@]}" "$@"
