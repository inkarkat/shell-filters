#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, they can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-s|--separator SEPERATOR] [-e|--truncate-empty-lines] [--] FILE [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Concatenate files with an empty line / SEPERATOR in between each.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --separator|-s SEP	Use SEP as the separator between FILEs. Needs to include
			leading and trailing newline if line breaks are desired.
			Default is an empty line; i.e. two newline characters.
    --truncate-empty-lines|-e
			Remove completely empty lines at the beginning and end
			of each file. A file that just contains empty lines will
			be shown as two separators end to end; a zero-length
			file is completely ignored.

RELATED COMMANDS:
- To prepend the filespec to each file's contents, use: tail -n +1 FILE [...]
HELPTEXT
}

separator=$'\n\n'
isTruncateEmptyLines=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--separator|-s)	shift; separator="${1?}"; shift;;
	--truncate-empty-lines|-e)
			shift; isTruncateEmptyLines=t;;
	--)		shift; break;;
	-)		break;; # For supporting special - FILE without prior --
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

exec awk \
    -v "separator=${separator//\\/\\\\}" \
    -v "isTruncateEmptyLines=$isTruncateEmptyLines" \
'
FNR == 1 {
    currentSep = separator
    isFirstFile = (NR == 1)
    firstLnum = 1
    buffer = ""
    while (isTruncateEmptyLines && $0 == "" && getline) {
	if (FNR == 1) {
	    firstLnum = 1
	    if (isFirstFile) {
		# Empty first file does not need leading newline on the upcoming separation.
		currentSep = gensub(/^\n/, "", 1, separator)
	    } else {
		# Omit the trailing newline as the current empty file did not have any output.
		printf("%s", gensub(/\n$/, "", 1, separator))
		isSeparatorLast = 1
	    }
	} else {
	    ++firstLnum
	}
    }
}
FNR == firstLnum && NR != firstLnum {
    printf("%s", currentSep)
    isSeparatorLast = 1
}
{
    newline = (FNR == firstLnum ? "" : "\n")
    if (isTruncateEmptyLines) {
	if (FNR > firstLum) {
	    if ($0 == "") {
		buffer = buffer newline $0
	    } else {
		printf("%s" newline "%s", buffer, $0)
		buffer = ""
		isSeparatorLast = 0
	    }
	}
    } else {
	printf(newline "%s", $0)
    }
}
END {
    # We only need conclusion if the the last file actually had content.
    if (! isSeparatorLast) printf("\n")
}
' "$@"
