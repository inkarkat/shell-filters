#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--] SECONDS [...] [-?|-h|--help]'
    echo
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-s|--skip SKIP&PATTERN [...]] [-m|--match MATCH&PATTERN [...]] [-w|--width WIDTH]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Treat any integer in the input as seconds and convert them into
[[[Ww ][Dd ] HH:]MM:]SS or 00:SS.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --skip|-s SKIP&PATTERN  Do not convert if the text around the integer (with
			    the integer itself represented by &) matches
			    SKIP&PATTERN.
    --match|-m MATCH&PATTERN
			    Only convert if the text around the integer (with
			    the integer itself represented by &) matches
			    MATCH&PATTERN. Other occurrences (and those that
			    also match --skip SKIP&PATTERN) are not converted.
    --width|-w WIDTH	    When converting the passed SECONDS, ensure a fixed
			    width of WIDTH (so that alignment is not disturbed)
			    by adding space padding to the left.
			    When replacing integers, ensure a fixed with of
			    integer width + WIDTH.
PATTERN is an AWK-style extended regular expression.
HELPTEXT
}
skipPattern=
matchPattern=
width=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--skip|-s)	shift; skipPattern="${skipPattern}${skipPattern:+|}${1:?}"; shift;;
	--match|-m)	shift; matchPattern="${matchPattern}${matchPattern:+|}${1:?}"; shift;;
	--width|-w)	shift; width="$1"; shift;;
	--)		break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

awk -F $'\n' \
    -v "skipPattern=${skipPattern//\\/\\\\}" \
    -v "matchPattern=${matchPattern//\\/\\\\}" \
    -v "width=$width" \
'
function convert(seconds,      hours, minutes)
{
    weeks = int(seconds / 604800)
    seconds = seconds - (604800 * weeks)
    days = int(seconds / 86400)
    seconds = seconds - (86400 * days)
    hours = int(seconds / 3600)
    seconds = seconds - (3600 * hours)
    minutes = int(seconds / 60)
    seconds = seconds - (60 * minutes)

    return \
	(weeks > 0 ? weeks "w " : "") \
	(days > 0 ? days "d " : "") \
	(weeks > 0 || days > 0 || hours > 0 ? sprintf("%02d", hours) ":" : "") \
	(weeks > 0 || days > 0 || hours > 0 || minutes > 0 ? sprintf("%02d", minutes) ":" : "") \
	(weeks > 0 || days > 0 || hours > 0 || minutes > 0 ? sprintf("%02d", seconds) : sprintf("00:%02d", seconds))
}
function shallowclone(target, source,      e)
{
    for (e in source) target[e] = source[e]
}
function join(n, list, seps,      i, result)
{
    for (i = 1; i <= n; ++i) {
	result = result list[i] seps[i]
    }
    result = result list[++i]
    return result
}
function repeat(text, count,      tmp, i)
{
    for (i = 1; i <= count; ++i) tmp = tmp text
    return tmp
}
function format(duration, width)
{
    if (width == "" || length(duration) == width) return duration

    if (length(duration) > width) {
	duration = reducePrecision(duration, width)
    }

    return sprintf("%" width "s", duration)
}
function reducePrecision(duration, width)
{
    # Convert 01:02:03 into 1h 2m 3s so that we have more pieces to play with.
    duration = gensub(/:0*([[:digit:]]{1,2})$/, " \\1s", 1, duration)
    duration = gensub(/(^| |:)0*([[:digit:]]{1,2}) /, " \\2m ", 1, duration)
    duration = gensub(/(^| )0*([[:digit:]]{1,2}) /, " \\2h ", 1, duration)
    duration = gensub(/^ +/, "", 1, duration)

    # Try to remove the smallest unit(s) until it fits.
    while (length(duration) > width) {
	if (duration ~ / /) {
	    duration = gensub(/ [^ ]+$/, "", 1, duration)
	} else {
	    return repeat("#", width)
	}
    }
    return duration
}
BEGIN {
    if (ARGC > 1) {
	i = 1
	if (ARGV[1] == "--" ) ++i
	for (; i < ARGC; ++i) {
	    print format(convert(ARGV[i]), width)
	}
	exit 0
    }
}
{
    n = split($0, rest, /\<[[:digit:]]+\>/, numbers)
    for (i = 1; i < n; ++i) {
	if (skipPattern != "" || matchPattern != "") {
	    shallowclone(testNumbers, numbers)
	    testNumbers[i] = "&"
	    testJoin = join(n, rest, testNumbers)
	    if (skipPattern != "" && testJoin ~ skipPattern) continue
	    if (matchPattern != "" && testJoin !~ matchPattern) continue
	}

	targetWidth = (width == "" ? "" : width + length(numbers[i]))
	numbers[i] = format(convert(numbers[i]), targetWidth)
    }

    $0 = join(n, rest, numbers)
    print
}
' "$@"
