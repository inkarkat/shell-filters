#!/bin/bash

: ${WORKDAY_SECONDS:=28800}; export WORKDAY_SECONDS
: ${WORKWEEK_SECONDS:=$((WORKDAY_SECONDS * 5))}; export WORKWEEK_SECONDS

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[--] SECONDS [...] [-?|-h|--help]'
    echo
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[-s|--skip SKIP&PATTERN [...]] [-m|--match MATCH&PATTERN [...]] [-x|--factor N] [-W|--workday] [--precision|-p WIDTH] [-w|--width [+]WIDTH]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Treat any integer in the input as seconds and convert them into
[[[Ww ][Dd ] HH:]MM:]SS or 00:SS.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --skip|-s SKIP&PATTERN  Do not convert if the text around the integer (with
			    the integer itself and any preceding spaces
			    represented by &) matches SKIP&PATTERN.
    --match|-m MATCH&PATTERN
			    Only convert if the text around the integer (with
			    the integer itself and any preceding spaces
			    represented by &) matches MATCH&PATTERN. Other
			    occurrences (and those that also match --skip
			    SKIP&PATTERN) are not converted.
    --factor|-x N	    Multiply the found integers with N (e.g. 60 for
			    minutes) to obtain seconds.
    --workday|-W	    Render days and larger units as working days
			    (comprised of $((WORKDAY_SECONDS / 3600)) hours, not 24) instead of calendar
			    days, and adapt the unit (1wd, not 1d), too.
			    The exact counting can be configured via
			    \$WORKDAY_SECONDS and \$WORKWEEK_SECONDS.
    --precision|-p WIDTH    Remove smaller units so that the result will fit
			    WIDTH; for example "01:02:03" will be rendered as
			    "1h 2m", with "3s" removed to fit a width of 7.
    --width|-w WIDTH	    Ensure a fixed width of WIDTH or the width of the
			    original integer and preceding spaces, whatever is
			    larger (so that alignment is not disturbed) by
			    adding space padding to the left.
    --width|-w +WIDTH	    Ensure a fixed width of the original integer and
			    any preceding spaces + WIDTH (so that alignment is
			    not disturbed) by adding space padding to the left.
PATTERN is an AWK-style extended regular expression.
HELPTEXT
}
skipPattern=
matchPattern=
width=
precision=
factor=1
isWorkDay=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--skip|-s)	shift; skipPattern="${skipPattern}${skipPattern:+|}${1:?}"; shift;;
	--match|-m)	shift; matchPattern="${matchPattern}${matchPattern:+|}${1:?}"; shift;;
	--width|-w)	shift; width="$1"; shift;;
	--precision|-p)	shift; precision="$1"; shift;;
	--factor|-x)	shift; factor="${1:?}"; shift;;
	--workday|-W)	shift; isWorkDay=t;;
	--)		break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

awk -F $'\n' \
    -v "skipPattern=${skipPattern//\\/\\\\}" \
    -v "matchPattern=${matchPattern//\\/\\\\}" \
    -v "widthArg=$width" \
    -v "precision=$precision" \
    -v "factor=$factor" \
    -v "isWorkDay=$isWorkDay" \
'
function max(n1, n2)
{
    return n1 > n2 ? n1 : n2
}
function getWidth(seconds)
{
    if (widthArg == "") {
	return ""
    } else if (widthArg ~ /^\+/) {
	return length(seconds) + widthArg
    } else {
	return max(widthArg, length(seconds))
    }
}
function convert(integer,      seconds, hours, minutes, workDayPrefix)
{
    seconds = factor * integer
    weeks = int(seconds / WEEK_IN_SECONDS)
    seconds = seconds - (WEEK_IN_SECONDS * weeks)
    days = int(seconds / DAY_IN_SECONDS)
    seconds = seconds - (DAY_IN_SECONDS * days)
    hours = int(seconds / 3600)
    seconds = seconds - (3600 * hours)
    minutes = int(seconds / 60)
    seconds = seconds - (60 * minutes)

    workDayPrefix = (isWorkDay ? "w" : "")
    return \
	(weeks > 0 ? weeks workDayPrefix "w " : "") \
	(days > 0 ? days workDayPrefix "d " : "") \
	(weeks > 0 || days > 0 || hours > 0 ? sprintf("%02d", hours) ":" : "") \
	(weeks > 0 || days > 0 || hours > 0 || minutes > 0 ? sprintf("%02d", minutes) ":" : "") \
	(weeks > 0 || days > 0 || hours > 0 || minutes > 0 ? sprintf("%02d", seconds) : sprintf("00:%02d", seconds))
}
function shallowclone(target, source,      e)
{
    for (e in source) target[e] = source[e]
}
function join(n, list, seps,      i, result)
{
    for (i = 1; i <= n; ++i) {
	result = result list[i] seps[i]
    }
    result = result list[++i]
    return result
}
function repeat(text, count,      tmp, i)
{
    for (i = 1; i <= count; ++i) tmp = tmp text
    return tmp
}
function format(duration, width, precision, isSpacePadded)
{
    if (precision != "" && length(duration) > precision) {
	duration = reducePrecision(duration, precision)
    }

    if (isSpacePadded) duration = " " duration	# Ensure that there will be at least one space in front to maintain separation of preceding text.

    if (width == "" || length(duration) == width) return duration

    return sprintf("%" width "s", duration)
}
function reducePrecision(duration, precision)
{
    # Convert 01:02:03 into 1h 2m 3s so that we have more pieces to play with.
    duration = gensub(/:0*([[:digit:]]{1,2})$/, " \\1s", 1, duration)
    duration = gensub(/(^| |:)0*([[:digit:]]{1,2}) /, " \\2m ", 1, duration)
    duration = gensub(/(^| )0*([[:digit:]]{1,2}) /, " \\2h ", 1, duration)
    duration = gensub(/^ +/, "", 1, duration)

    # Try to remove the smallest unit(s) until it fits.
    while (length(duration) > precision) {
	if (duration ~ / /) {
	    duration = gensub(/ [^ ]+$/, "", 1, duration)
	} else {
	    return repeat("#", precision)
	}
    }
    return duration
}
BEGIN {
    WEEK_IN_SECONDS = (isWorkDay ? ENVIRON["WORKWEEK_SECONDS"] : 604800)
    DAY_IN_SECONDS = (isWorkDay ? ENVIRON["WORKDAY_SECONDS"] : 86400)

    if (ARGC > 1) {
	i = 1
	if (ARGV[1] == "--" ) ++i
	for (; i < ARGC; ++i) {
	    print format(convert(ARGV[i]), getWidth(ARGV[i]), precision, 0)
	}
	exit 0
    }
}
{
    n = split($0, rest, / *\<[[:digit:]]+\>/, numbers)
    for (i = 1; i < n; ++i) {
	if (skipPattern != "" || matchPattern != "") {
	    shallowclone(testNumbers, numbers)
	    testNumbers[i] = "&"
	    testJoin = join(n, rest, testNumbers)
	    if (skipPattern != "" && testJoin ~ skipPattern) continue
	    if (matchPattern != "" && testJoin !~ matchPattern) continue
	}

	numbers[i] = format(convert(numbers[i]), getWidth(numbers[i]), precision, (numbers[i] ~ /^ /))
    }

    $0 = join(n, rest, numbers)
    print
}
' "$@"
