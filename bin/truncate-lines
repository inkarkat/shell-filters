#!/bin/bash

printShortUsage()
{
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-v|--verbose|--verbose-color] [--consider ADDRESS] [--match ADDRESS] SED-EXPR [...] [--else SED-EXPR] [--else-delete] [--] FILE [...] [-?|-h|--help]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Apply sed expression(s) in-place over a list of files. There are two levels of
guards before applying an expression: A general, per-file ADDRESS (commonly a
/PATTERN/ check, but can be any valid sed address) as --consider, and a --match
check per expression. There can be a fallback expression with --else, and the
file can even be removed if nothing changed its contents.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
--verbose|-v		Show detailed results for each file.
--verbose-color		Same, but with different colors depending on action taken.
--consider ADDRESS	If the FILE does not match ADDRESS (which often is a sed
			/PATTERN/), it is skipped.
--match ADDRESS	SED-EXPR
			Execute the following SED-EXPR if ADDRESS matches
			anywhere in the FILE.
--else SED-EXPR		Execute SED-EXPR if none of the --match ADDRESS actually
			changed the FILE.
--else-delete		Remove the FILE if none of the --match ADDRESS (and
			neither a --else) actually changed the FILE.
Example:
This searches all files that have lines starting with a year. It only keeps
those lines that follow 2017. Files that only contain other years are completely
cleared.
HELPTEXT
    printf '%q %s\n' "$(basename "$1")" "--consider '/^20[0-9][0-9]/' --match '/^2017/' -n '/^2017/,\$p' --else -n '' -- /tmp/foobar"
}

: ${COLOR_SKIP:='[37m'}
: ${COLOR_DELETED:='[31m'}
: ${COLOR_UNCHANGED:='[0m'}
: ${COLOR_MATCHED:='[01m'}
: ${COLOR_ELSE:='[01;35m'}
: ${COLOR_RESET:='[0m'}

readonly elseMatch=$'\r'
verbosePrintf() { :; }
consider=
currentMatch=
isElseDelete=
typeset -a matches=()
typeset -a allSedArguments=()
typeset -A matchSedArgumentNum=
typeset -A matchSedHasIArgument=
typeset -A matchSedHasExpression=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--verbose|-v)	shift; COLOR_SKIP='' COLOR_DELETED='' COLOR_UNCHANGED='' COLOR_MATCHED='' COLOR_ELSE='' COLOR_RESET='';&
	--verbose-color)
			shift; verbosePrintf() { printf "$@"; };;
	--consider)	shift; consider="$1"; shift;;
	--match)	shift; matches+=("$1");         currentMatch="${1//\\/}";  matchSedArgumentNum["$currentMatch"]=0; shift;;  # XXX: Somehow need to remove backslashes from associative array keys.
	--else)		shift; matches+=("$elseMatch"); currentMatch="$elseMatch"; matchSedArgumentNum["$elseMatch"]=0;;
	--else-delete)	shift; isElseDelete=t;;
	# sed arguments
	-i*)					allSedArguments+=("$1");      let matchSedArgumentNum["$currentMatch"]+=1; matchSedHasIArgument["$currentMatch"]=t; shift;;
	-n|--regexp-extended|-r|--null-data|-z)	allSedArguments+=("$1");      let matchSedArgumentNum["$currentMatch"]+=1; shift;;
	-e|-f)					allSedArguments+=("$1" "$2"); let matchSedArgumentNum["$currentMatch"]+=2; matchSedHasExpression["$currentMatch"]=t; shift; shift;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		if [ "$currentMatch" ] && [ ! "${matchSedHasExpression["$currentMatch"]}" ]; then
			    allSedArguments+=("$1")
			    let matchSedArgumentNum["$currentMatch"]+=1
			    matchSedHasExpression["$currentMatch"]=t
			    shift
			else
			    break
			fi
			;;
    esac
done
[ $# -eq 0 ] && { printUsage "$0" >&2; exit 2; }



sedWrapper()
{
#### echo >&2 "---- sed $*"
    sed "$@" && return 0
    local status=$?
    printf '%s%s\n' "$PS4" "$*"
    return $status
}
sedMatch()
{
    local address=$1; shift
    local filespec=$1; shift
    [ "$(sedWrapper -n "${address}{p; q}" "$filespec")" ]
}

tempFilespec="$(mktemp --tmpdir "$(basename -- "$0")-XXXXXX" 2>/dev/null || echo "${TMPDIR:-/tmp}/$(basename -- "$0").$$$RANDOM")"
status=0
typeset -a modifiedFiles=()
let allFileCnt=0
let consideredFileCnt=0
let unchangedFileCnt=0
let matchedFileCnt=0
let elseFileCnt=0
let deletedFileCnt=0
for filespec
do
    if [ ! -r "$filespec" ]; then
	printf >&2 "Can't read %s: No such file\n" "$filespec"
	status=1
	continue
    fi
    let allFileCnt+=1
    if ! sedMatch "$consider" "$filespec"; then
	verbosePrintf '%sSkip:      %s%s\n' "$COLOR_SKIP" "$filespec" "$COLOR_RESET"
	continue
    fi
    let consideredFileCnt+=1

    isMatched=
    cp --force --no-preserve=all -- "$filespec" "$tempFilespec" 2>/dev/null

	let allSedArgumentCnt=0
	for match in "${matches[@]}"
	do
	    let sedArgumentNum=${matchSedArgumentNum["${match//\\/}"]}
#### echo "**** sedArgumentNum: $sedArgumentNum"
#### echo "**** allSedArguments: ${allSedArguments[*]}"
#### echo "**** match: $match"
	    isElseMatch=; [ "$match" = "$elseMatch" ] && isElseMatch=t
	    if [ "$isElseMatch" ]; then
		cmp --quiet -- "$filespec" "$tempFilespec"
		if [ $? -eq 1 ]; then
		    isMatched=t
		    continue
		fi
	    fi

	    if [ "$isElseMatch" ] || sedMatch "$match" "$filespec"; then
		[ "${matchSedHasIArgument["${match//\\/}"]}" ] && typeset -a sedArguments=() || typeset -a sedArguments=(-i)
		sedArguments+=("${allSedArguments[@]:${allSedArgumentCnt}:${sedArgumentNum}}")

#### echo "**** sedArguments: ${sedArguments[*]}"
		sedWrapper "${sedArguments[@]}" "$filespec" || status=$?
	    fi

	    let allSedArgumentCnt+=$sedArgumentNum
	done

    cmp --quiet -- "$filespec" "$tempFilespec"; compare=$?
    if [ $compare -eq 0 ]; then
	if [ "$isElseDelete" ] && rm -- "$filespec"; then
	    let deletedFileCnt+=1
	    verbosePrintf '%sDeleted:   %s%s\n' "$COLOR_DELETED" "$filespec" "$COLOR_RESET"
	else
	    let unchangedFileCnt+=1
	    verbosePrintf '%sUnchanged: %s%s\n' "$COLOR_UNCHANGED" "$filespec" "$COLOR_RESET"
	fi
    elif [ $compare -eq 1 ]; then
	modifiedFiles+=("$filespec")

	if [ ! "$isElseMatch" -o "$isMatched" ]; then
	    let matchedFileCnt+=1
	    verbosePrintf '%sMatched:   %s%s\n' "$COLOR_MATCHED" "$filespec" "$COLOR_RESET"
	else
	    let elseFileCnt+=1
	    verbosePrintf '%sElse:      %s%s\n' "$COLOR_ELSE" "$filespec" "$COLOR_RESET"
	fi
    fi
    rm --force -- "$tempFilespec" 2>/dev/null
done

printf 'From %d files considered %d / skipped %d: matched %d, else %d, unchanged %d, deleted %d.\n' \
    "$allFileCnt" "$consideredFileCnt" "$((allFileCnt - consideredFileCnt))" \
    "$matchedFileCnt" "$elseFileCnt" "$unchangedFileCnt" "$deletedFileCnt"
exit $status
