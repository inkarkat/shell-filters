#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-G|--basic-regexp|-E|--extended-regexp] [-x|--line-regexp] [-m|--multiline] [-a|--additional-chars CHARS] [-?|-h|--help]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[...] -- FILE [...]'
    printf 'Usage: %q %s\n' "$(basename "$1")" '[...] TEXT [...]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Convert passed FILE contents / each passed TEXT to a basic regular expression
that matches the literal TEXT.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --extended-regexp|-E
			Apply escaping for interpretation as an extended regular
			expression.
    --line-regexp|-x	Add ^ and $ anchors to the resulting regular expression.
    --multiline|-m	Convert the entire input / TEXT to a single regular
			expression with \n atoms instead of converting each line
			separately.
    --additional-chars|-a CHARS
			Also escape each character in CHARS as well.
HELPTEXT
}
additionalChars=
typeset -a additionalSedArgs=()
typeset -a joinerBeforeSedArgs=() joinerAfterSedArgs=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--basic-regexp|-G)
			shift;;
	--extended-regexp|-E)
			shift; additionalChars+='+?{}.|()';;
	--line-regexp|-x)
			shift; additionalSedArgs+=(-e 's/.*/^&$/');;
	--additional-chars|-a)
			shift; additionalChars+="${1?}"; shift;;
	--multiline|-m)	shift; joinerBeforeSedArgs+=(-e :a -e '$!{ N; b a; }' -e '$!b'); joinerAfterSedArgs=(-e '$s/\n/\\n/g');;
	--)		break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done

typeset -a TOLITERALREGEXP=(
    sed "${joinerBeforeSedArgs[@]}" \
	-e "s/[][\\\$*.^${additionalChars//\//\\/}]/\\\\&/g"
	"${joinerAfterSedArgs[@]}" \
	"${additionalSedArgs[@]}"
)
if [ $# -eq 0 ]; then
    exec "${TOLITERALREGEXP[@]}"
elif [ $# -ge 2 -a "$1" = '--' ]; then
    shift
    cat -- "$@" | "${TOLITERALREGEXP[@]}"
else
    for text
    do
	printf '%s\n' "$text" | "${TOLITERALREGEXP[@]}"
    done
fi
