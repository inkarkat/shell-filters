#!/bin/bash
set -o pipefail

: ${FIRSTRESTLINES_COMMAND_JOINER=|}
: ${FIRSTRESTLINES_EXEC_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, they can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" "[-n|--count N] [-f|--first-command \"COMMANDLINE\" [...] | --first-exec SIMPLECOMMAND [...] ${FIRSTRESTLINES_EXEC_END} [--first-exec ...] [--abort-on-failure|-x|--fail-command \"COMMANDLINE\" [...] | --fail-exec SIMPLECOMMAND [...] ${FIRSTRESTLINES_EXEC_END} [--fail-exec ...]]] [-r|--rest-command \"COMMANDLINE\" [...] | --rest-exec SIMPLECOMMAND [...] ${FIRSTRESTLINES_EXEC_END} [--rest-exec ...]] [-?|-h|--help]"
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Split the first [N] line(s) off the input and pass both first and remaining
lines to different commands (or just print the input if omitted).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --count|-n N		Use the first N lines of the input for the first
				command instead of just the first one.
    --first-command|-f CMD	Pipe the first line's contents into CMD as a
				command-line.
    --first-exec CMD [...] ${FIRSTRESTLINES_EXEC_END}	Pipe the first line's contents into CMD; all
				following arguments are taken to be arguments to
				the CMD until an argument consisting of
				'${FIRSTRESTLINES_EXEC_END}' is encountered.
    --abort-on-failure		Do not consume remaining lines if the first
				command fails. The command for remaining lines
				is not executed.
    --fail-command|-x CMD	Pipe the remaining line's contents into CMD as a
				command-line if the first command fails (instead
				of using --rest-command).
    --fail-exec CMD [...] ${FIRSTRESTLINES_EXEC_END}	Pipe the remaining line's contents into CMD if
				the first command fails; all following arguments
				are taken to be arguments to the CMD until an
				argument consisting of '${FIRSTRESTLINES_EXEC_END}' is encountered.
    --rest-command|-r CMD	Pipe the remaining line's contents into CMD as a
				command-line.
    --rest-exec CMD [...] ${FIRSTRESTLINES_EXEC_END}	Pipe the remaining line's contents into CMD; all
				following arguments are taken to be arguments to
				the CMD until an argument consisting of
				'${FIRSTRESTLINES_EXEC_END}' is encountered.
EXIT STATUS:
    0	Complete success.
    2	Bad invocation, wrong or missing command-line arguments.
    *   any exit status from the first failing COMMAND(s)

Example:
HELPTEXT
    printf 'git log -1 | %q %s\n' "$(basename "$1")" '-f bold'
}

let count=1
isAbortOnFailure=
firstCommands=
failCommands=
restCommands=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--count|-n)	shift; count="${1:?}"; shift;;
	--abort-on-failure)
			shift; isAbortOnFailure=t;;
	--first-command|-f)
			shift; firstCommands+="${firstCommands:+ $FIRSTRESTLINES_COMMAND_JOINER }$1"; shift;;
	--first-exec)	shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$FIRSTRESTLINES_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd+="${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${FIRSTRESTLINES_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			firstCommands+="${firstCommands:+ $FIRSTRESTLINES_COMMAND_JOINER }${cmd}"
			;;
	--fail-command|-x)
			shift; failCommands+="${failCommands:+ $FIRSTRESTLINES_COMMAND_JOINER }$1"; shift;;
	--fail-exec)	shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$FIRSTRESTLINES_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd+="${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${FIRSTRESTLINES_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			failCommands+="${failCommands:+ $FIRSTRESTLINES_COMMAND_JOINER }${cmd}"
			;;
	--rest-command|-r)
			shift; restCommands+="${restCommands:+ $FIRSTRESTLINES_COMMAND_JOINER }$1"; shift;;
	--rest-exec)	shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$FIRSTRESTLINES_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd+="${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${FIRSTRESTLINES_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			restCommands+="${restCommands:+ $FIRSTRESTLINES_COMMAND_JOINER }${cmd}"
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -ne 0 ]; then
    printUsage "$0" >&2
    exit 2
elif [ "$isAbortOnFailure" ] && [ -n "$failCommands" ]; then
    echo >&2 'ERROR: --abort-on-failure and -x|--fail-command|--fail-exec are mutually exclusive.'
    echo >&2
    printUsage "$0" >&2
    exit 2
elif [ -z "$firstCommands" -a -z "$restCommands" ]; then
    # No-op without any commands.
    exec cat
fi

obtainFirstLines()
{
    isEOL=t
    while ((count-- > 0)) && { IFS=$'\n' read -r line || { isEOL=; [ -n "$line" ]; }; }
    do
	printf "%s${isEOL:+\n}" "$line"
    done
}

status=
[ $count -le 0 ] || \
    eval "obtainFirstLines" \
	"${firstCommands:+|} $firstCommands" \
	|| {
	    status=$?
	    if [ "$isAbortOnFailure" ]; then
		exit $status
	    elif [ -n "$failCommands" ]; then
		eval "$failCommands"; exit $status
	    fi
	}
eval "${restCommands:-cat}" || : ${status:=$?}
exit ${status:-0}
