#!/bin/bash

: ${PREFIX_COMMAND_JOINER=;}
: ${PREFIX_EXEC_END=;}

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-k|--keep-indent] [-s|--skip-empty] [-f|--first-then-indent] [--] PREFIX FILE [...] [-?|-h|--help]'
    echo
    printf 'Usage: %q %s\n' "$(basename "$1")" "[...] -c|--command \"COMMANDLINE\" [-c ...] | --exec SIMPLECOMMAND ... $PREFIX_EXEC_END [--exec ...] [--] PREFIX"
    echo
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[...] [--] PREFIX'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 '\nTry %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Prefix each individual line with PREFIX.
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    echo
    cat <<HELPTEXT
    --keep-indent|-k	Put leading whitespace before the PREFIX.
    --skip-empty|-s	Do not prefix lines that are empty or just contain
			whitespace; print them as-is.
    --first-then-indent|-f
			Prefix the first line, then indent following lines with
			the same amount of spaces.
    --command|-c CMD	Execute CMD as a command-line and prefix its output.
    --exec COMMAND $PREFIX_EXEC_END	Execute COMMAND; all following arguments are taken to be
			arguments to the COMMAND until an argument consisting of
			'${PREFIX_EXEC_END}' is encountered. Its output is prefixed.
HELPTEXT
}

commands=
isKeepIndent=
isOnlyFirst=
additionalSedProcessing=()
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	shift; printLongUsage "$0"; exit 0;;
	--keep-indent|-k)	shift; isKeepIndent=t;;
	--skip-empty|-s)	shift; additionalSedProcessing+=(-e '/^[[:space:]]*\r\?$/b');;
	--first-then-indent|-f)	shift; isOnlyFirst=t;;
	--command|-c)	shift; commands+="${commands:+ $PREFIX_COMMAND_JOINER }$1"; shift;;
	--exec)		shift
			cmd=
			while [ $# -gt 0 -a "$1" != "$PREFIX_EXEC_END" ]
			do
			    printf -v quotedArg '%q' "$1"
			    cmd+="${cmd:+ }${quotedArg}"
			    shift
			done
			if [ $# -eq 0 ]; then
			    echo "ERROR: --exec command must be concluded with '${PREFIX_EXEC_END}'"; echo; printUsage "$0"
			    exit 2
			fi >&2
			shift
			commands+="${commands:+ $PREFIX_COMMAND_JOINER }${cmd}"
			;;
	--)		shift; break;;
	-*)		{ echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		break;;
    esac
done
if [ $# -eq 0 ] || [ -n "$commands" -a $# -ne 1 ]; then
    printUsage "$0" >&2
    exit 2
fi

prefix="$1"; shift
literalPrefix="$prefix"
literalPrefix="${literalPrefix//\\/\\\\}"
literalPrefix="${literalPrefix//&/\\&}"
literalPrefix="${literalPrefix//$'\n'/\\n}"

address=
typeset -a indentSedProcessing=()
if [ "$isOnlyFirst" ]; then
    indent="$(printf %s "$prefix" | noansi)"; indent="${indent//?/ }"
    address=1
    indentSedProcessing=(-e "${address}!s#\\(^${isKeepIndent:+[[:space:]]*}\\)#\\1${indent}#")
fi

eval "${commands:+{ }" "${commands:-exec}" "${commands:+" ; } |"}" \
    'sed "${additionalSedProcessing[@]}" -e "${address}s#\\(^${isKeepIndent:+[[:space:]]*}\\)#\\1${literalPrefix//#/\\#}#" "${indentSedProcessing[@]}" "$@"'
