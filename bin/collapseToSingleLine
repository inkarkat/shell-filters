#!/bin/bash

printShortUsage()
{
    # Note: short followed by long option; if the user knows the short one, she can
    # skim the long one.
    printf 'Usage: %q %s\n' "$(basename "$1")" '[-s|--separator SEP] [-e|--empty-line-separator EMPTY-SEP] [-a|--break-after|-b|--break-before PATTERN] [-t|--break-timeout SECONDS] [-w|--wrap COL] FILE [...] [-?|-h|--help]'
    printf 'Usage: cat FILE [...] | %q %s\n' "$(basename "$1")" '[...]'
}
printUsage()
{
    # This is the short help when launched with no or incorrect arguments.
    # It is printed to stderr to avoid accidental processing.
    printShortUsage "$1" >&2
    printf >&2 'Try %q --help for more information.\n' "$(basename "$1")"
}
printLongUsage()
{
    # This is the long "man page" when launched with the help argument.
    # It is printed to stdout to allow paging with 'more'.
    cat <<HELPDESCRIPTION
Join all lines (from FILE or standard input) with a single space (or SEP) into a
single long line (that is printed piecemeal).
HELPDESCRIPTION
    echo
    printShortUsage "$1"
    cat <<HELPTEXT
    --separator|-s SEP	Use SEP (instead of a single space) to join lines.
    --empty-line-separator|-e EMPTY-SEP
			Convert (subsequent runs of) empty line(s) to EMPTY-SEP.
    --break-after|-a PATTERN
    --break-before|-b PATTERN
			If the current line matches (extended regexp) PATTERN,
			create a new line after / before it.
    --break-timeout|-t SECONDS
			If no new line arrives within SECONDS, create new line.
    --wrap|-w COL	Wrap (entire input lines) before the accumulated number
			of characters exceeds COL. No separator is printed then.
HELPTEXT
}

separator=' '
unset emptyLineSeparator
breakAfter=
breakBefore=
breakTimeout=
wrapCol=
while [ $# -ne 0 ]
do
    case "$1" in
	--help|-h|-\?)	    shift; printLongUsage "$0"; exit 0;;
	--separator|-s)	    shift; separator="$1"; shift;;
	--empty-line-separator|-e)
			    shift; emptyLineSeparator="$1"; shift;;
	--break-after|-a)   shift; breakAfter="$1"; shift;;
	--break-before|-b)  shift; breakBefore="$1"; shift;;
	--break-timeout|-t) shift; breakTimeout="$1"; shift;;
	--wrap|-w)	    shift; wrapCol="$1"; shift;;
	--)		    shift; break;;
	-*)		    { echo "ERROR: Unknown option \"$1\"!"; echo; printUsage "$0"; } >&2; exit 2;;
	*)		    break;;
    esac
done

s=
isEmptyLine=
SECONDS=0
currentLine=
newline()
{
    printf '\n'
    currentLine=''
}
cat "$@" | {
    [ "$wrapCol" ] && coproc NOWRAP { nowrap --unbuffered --column "$wrapCol"; }    # Start a coproc to filter individual lines; this is much more efficient than starting a new process for each line.

    while IFS=$'\n' read -r line || [ -n "$line" ]
    do
	if [ -z "$line" -a -n "${emptyLineSeparator+t}" ]; then
	    # Print separator on the first empty line; do nothing on subsequent
	    # ones.
	    if [ -z "$isEmptyLine" ]; then
		isEmptyLine=t
		printf '%s' "$emptyLineSeparator"
		currentLine="${currentLine}${emptyLineSeparator}"; currentLine="${currentLine##*$'\n'}"
	    fi
	else
	    if [ "$breakTimeout" ]; then
		[ $SECONDS -gt "$breakTimeout" ] && newline
		SECONDS=0
	    fi

	    [ "$breakBefore" ] && [[ "$line" =~ $breakBefore ]] && newline

	    if [ "$wrapCol" ]; then
		fullLine="${currentLine}${s}${line}"
		printf '%s\n' "$fullLine" >&"${NOWRAP[1]}"
		read -ru "${NOWRAP[0]}" wrappedLine
		if [ "$wrappedLine" = "$fullLine" ]; then
		    printf '%s%s' "$s" "$line"
		    currentLine="${currentLine}${s}${line}"
		else
		    printf '\n%s' "$line"
		    currentLine="${line}"
		fi
	    else
		printf '%s%s' "$s" "$line"
	    fi

	    [ "$breakAfter" ] && [[ "$line" =~ $breakAfter ]] && newline

	    s="$separator"
	    isEmptyLine=
	fi
    done
    printf '\n'
}
